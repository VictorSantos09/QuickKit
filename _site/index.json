{
  "api/QuickKit.AspNetCore.Attributes.HttpAddKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpAddKit.html",
    "title": "Class HttpAddKit | QuickKit",
    "keywords": "Class HttpAddKit Namespace QuickKit.AspNetCore.Attributes Assembly QuickKit.AspNetCore.dll Represents an attribute that is used to add a resource using HTTP POST method. Does not define the data. Does not define the response. Uses the naming convention from ADD [AttributeUsage(AttributeTargets.Method)] public class HttpAddKit : HttpPostAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpPostAttribute HttpAddKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpAddKit(string) Initializes a new instance of the HttpAddKit class with the specified template. public HttpAddKit(string template = \"add\") Parameters template string The template for the endpoint."
  },
  "api/QuickKit.AspNetCore.Attributes.HttpDeleteKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpDeleteKit.html",
    "title": "Class HttpDeleteKit | QuickKit",
    "keywords": "Class HttpDeleteKit Namespace QuickKit.AspNetCore.Attributes Assembly QuickKit.AspNetCore.dll Represents an attribute that specifies that an action method should be accessible via HTTP DELETE requests. Does not define the data. Does not define the response. Uses the naming convention from DELETE [AttributeUsage(AttributeTargets.Method)] public class HttpDeleteKit : HttpDeleteAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpDeleteAttribute HttpDeleteKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpDeleteKit(string) Initializes a new instance of the HttpDeleteKit class with the specified template. public HttpDeleteKit(string template = \"delete\") Parameters template string The template for the endpoint."
  },
  "api/QuickKit.AspNetCore.Attributes.HttpGetAllKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpGetAllKit.html",
    "title": "Class HttpGetAllKit | QuickKit",
    "keywords": "Class HttpGetAllKit Namespace QuickKit.AspNetCore.Attributes Assembly QuickKit.AspNetCore.dll Represents an attribute that specifies an HTTP GET request to retrieve all data. Does not define the data. Does not define the response. Uses the naming convention from GET_ALL [AttributeUsage(AttributeTargets.Method)] public class HttpGetAllKit : HttpGetAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpGetAttribute HttpGetAllKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpGetAllKit(string) Initializes a new instance of the HttpGetAllKit class with the specified template. public HttpGetAllKit(string template = \"\") Parameters template string The template for the endpoint."
  },
  "api/QuickKit.AspNetCore.Attributes.HttpGetByIdKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpGetByIdKit.html",
    "title": "Class HttpGetByIdKit | QuickKit",
    "keywords": "Class HttpGetByIdKit Namespace QuickKit.AspNetCore.Attributes Assembly QuickKit.AspNetCore.dll Represents an attribute that specifies an HTTP GET request for retrieving a resource by its ID. Does not define the data. Does not define the response. Uses the naming convention from GET_BY_ID [AttributeUsage(AttributeTargets.Method)] public class HttpGetByIdKit : HttpGetAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpGetAttribute HttpGetByIdKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpGetByIdKit(string) Initializes a new instance of the HttpGetByIdKit class with the specified template. Does not define the data. Does not define the response. Uses the naming convention from GET_BY_ID public HttpGetByIdKit(string template = \"{id}\") Parameters template string The template for the endpoint."
  },
  "api/QuickKit.AspNetCore.Attributes.HttpGetTestEndPointKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpGetTestEndPointKit.html",
    "title": "Class HttpGetTestEndPointKit | QuickKit",
    "keywords": "Class HttpGetTestEndPointKit Namespace QuickKit.AspNetCore.Attributes Assembly QuickKit.AspNetCore.dll Represents an attribute that specifies an HTTP GET for test endpoint. Does not define the data. Does not define the response. Uses the naming convention from TEST [AttributeUsage(AttributeTargets.Method)] public class HttpGetTestEndPointKit : HttpGetAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpGetAttribute HttpGetTestEndPointKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpGetTestEndPointKit(string) Initializes a new instance of the HttpGetTestEndPointKit class with the specified template. public HttpGetTestEndPointKit(string template = \"test\") Parameters template string The template for the endpoint."
  },
  "api/QuickKit.AspNetCore.Attributes.HttpUpdateKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpUpdateKit.html",
    "title": "Class HttpUpdateKit | QuickKit",
    "keywords": "Class HttpUpdateKit Namespace QuickKit.AspNetCore.Attributes Assembly QuickKit.AspNetCore.dll Represents an attribute that is used to decorate a method as an HTTP update endpoint. Does not define the data. Does not define the response. Uses the naming convention from UPDATE [AttributeUsage(AttributeTargets.Method)] public class HttpUpdateKit : HttpPutAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Inheritance object Attribute HttpMethodAttribute HttpPutAttribute HttpUpdateKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpUpdateKit(string) Initializes a new instance of the HttpUpdateKit class with the specified template. public HttpUpdateKit(string template = \"update\") Parameters template string The template for the endpoint."
  },
  "api/QuickKit.AspNetCore.Attributes.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.html",
    "title": "Namespace QuickKit.AspNetCore.Attributes | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Attributes Classes HttpAddKit Represents an attribute that is used to add a resource using HTTP POST method. Does not define the data. Does not define the response. Uses the naming convention from ADD HttpDeleteKit Represents an attribute that specifies that an action method should be accessible via HTTP DELETE requests. Does not define the data. Does not define the response. Uses the naming convention from DELETE HttpGetAllKit Represents an attribute that specifies an HTTP GET request to retrieve all data. Does not define the data. Does not define the response. Uses the naming convention from GET_ALL HttpGetByIdKit Represents an attribute that specifies an HTTP GET request for retrieving a resource by its ID. Does not define the data. Does not define the response. Uses the naming convention from GET_BY_ID HttpGetTestEndPointKit Represents an attribute that specifies an HTTP GET for test endpoint. Does not define the data. Does not define the response. Uses the naming convention from TEST HttpUpdateKit Represents an attribute that is used to decorate a method as an HTTP update endpoint. Does not define the data. Does not define the response. Uses the naming convention from UPDATE"
  },
  "api/QuickKit.AspNetCore.Configuration.AspNetCoreConfiguration.html": {
    "href": "api/QuickKit.AspNetCore.Configuration.AspNetCoreConfiguration.html",
    "title": "Class AspNetCoreConfiguration | QuickKit",
    "keywords": "Class AspNetCoreConfiguration Namespace QuickKit.AspNetCore.Configuration Assembly QuickKit.AspNetCore.dll Provides extension methods for configuring ASP.NET Core middleware related to global exception handling. public static class AspNetCoreConfiguration Inheritance object AspNetCoreConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCustomGlobalExceptionMiddleware<TException>(IApplicationBuilder, GlobalExceptionMiddlewareConfigurationRequest<TException>) Adds custom global exception middleware to the application pipeline. public static IApplicationBuilder AddCustomGlobalExceptionMiddleware<TException>(this IApplicationBuilder app, GlobalExceptionMiddlewareConfigurationRequest<TException> config) where TException : Exception Parameters app IApplicationBuilder The IApplicationBuilder instance. config GlobalExceptionMiddlewareConfigurationRequest<TException> The configuration for the custom global exception middleware. Returns IApplicationBuilder The IApplicationBuilder instance. Type Parameters TException The type of exception to be handled by the middleware. AddDefaultGlobalExceptionMiddleware(IApplicationBuilder, string, bool) Adds the default global exception middleware to the application pipeline. public static IApplicationBuilder AddDefaultGlobalExceptionMiddleware(this IApplicationBuilder app, string defaultMessage = \"An error has occurred while processing your request\", bool showStackTrace = true) Parameters app IApplicationBuilder The IApplicationBuilder instance. defaultMessage string The default error message to be displayed when an exception occurs. showStackTrace bool A flag indicating whether to include the stack trace in the error message. Returns IApplicationBuilder The IApplicationBuilder instance."
  },
  "api/QuickKit.AspNetCore.Configuration.html": {
    "href": "api/QuickKit.AspNetCore.Configuration.html",
    "title": "Namespace QuickKit.AspNetCore.Configuration | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Configuration Classes AspNetCoreConfiguration Provides extension methods for configuring ASP.NET Core middleware related to global exception handling."
  },
  "api/QuickKit.AspNetCore.Constants.ENDPOINT_NAME_CNT_KIT.html": {
    "href": "api/QuickKit.AspNetCore.Constants.ENDPOINT_NAME_CNT_KIT.html",
    "title": "Struct ENDPOINT_NAME_CNT_KIT | QuickKit",
    "keywords": "Struct ENDPOINT_NAME_CNT_KIT Namespace QuickKit.AspNetCore.Constants Assembly QuickKit.AspNetCore.dll Contains the endpoint naming conventions from the QuickKit Framework. public readonly struct ENDPOINT_NAME_CNT_KIT Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ADD Represents the \"add\" endpoint. public const string ADD = \"add\" Field Value string DELETE Represents the \"delete\" endpoint. public const string DELETE = \"delete\" Field Value string GET_ALL Represents the \"get all\" endpoint. public const string GET_ALL = \"\" Field Value string GET_BY_ID Represents the \"get by id\" endpoint with a placeholder for the ID. public const string GET_BY_ID = \"{id}\" Field Value string TEST Represents the \"test\" endpoint. public const string TEST = \"test\" Field Value string UPDATE Represents the \"update\" endpoint. public const string UPDATE = \"update\" Field Value string"
  },
  "api/QuickKit.AspNetCore.Constants.html": {
    "href": "api/QuickKit.AspNetCore.Constants.html",
    "title": "Namespace QuickKit.AspNetCore.Constants | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Constants Structs ENDPOINT_NAME_CNT_KIT Contains the endpoint naming conventions from the QuickKit Framework."
  },
  "api/QuickKit.AspNetCore.Controllers.Controller-2.html": {
    "href": "api/QuickKit.AspNetCore.Controllers.Controller-2.html",
    "title": "Class Controller<TEntity, TKey> | QuickKit",
    "keywords": "Class Controller<TEntity, TKey> Namespace QuickKit.AspNetCore.Controllers Assembly QuickKit.AspNetCore.dll Represents a base controller for CRUD operations on entities. public abstract class Controller<TEntity, TKey> : ControllerBase, IController<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters TEntity The type of the entity. TKey The type of the entity's key. Inheritance object ControllerBase Controller<TEntity, TKey> Implements IController<TEntity, TKey> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAsync(TEntity) Adds a new entity asynchronously. public abstract Task<IActionResult> AddAsync(TEntity entity) Parameters entity TEntity The entity to add. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. DeleteAsync(TKey) Deletes an entity by its ID asynchronously. public abstract Task<IActionResult> DeleteAsync(TKey id) Parameters id TKey The ID of the entity to delete. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. GetAllAsync() Retrieves all entities asynchronously. public abstract Task<IActionResult> GetAllAsync() Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. GetByIdAsync(TKey) Retrieves an entity by its ID asynchronously. public abstract Task<IActionResult> GetByIdAsync(TKey id) Parameters id TKey The ID of the entity. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. TestEndPoint() Tests the endpoint of the controller. public abstract IActionResult TestEndPoint() Returns IActionResult An IActionResult representing the result of the test. UpdateAsync(TEntity) Updates an existing entity asynchronously. public abstract Task<IActionResult> UpdateAsync(TEntity entity) Parameters entity TEntity The entity to update. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult."
  },
  "api/QuickKit.AspNetCore.Controllers.IController-2.html": {
    "href": "api/QuickKit.AspNetCore.Controllers.IController-2.html",
    "title": "Interface IController<TEntity, TKey> | QuickKit",
    "keywords": "Interface IController<TEntity, TKey> Namespace QuickKit.AspNetCore.Controllers Assembly QuickKit.AspNetCore.dll Represents a generic controller interface for CRUD operations on entities. public interface IController<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters TEntity The type of the entity. TKey The type of the entity's primary key. Methods AddAsync(TEntity) Adds a new entity asynchronously. Task<IActionResult> AddAsync(TEntity entity) Parameters entity TEntity The entity to add. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. DeleteAsync(TKey) Deletes an entity by its ID asynchronously. Task<IActionResult> DeleteAsync(TKey id) Parameters id TKey The ID of the entity to delete. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. GetAllAsync() Retrieves all entities asynchronously. Task<IActionResult> GetAllAsync() Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. GetByIdAsync(TKey) Retrieves an entity by its ID asynchronously. Task<IActionResult> GetByIdAsync(TKey id) Parameters id TKey The ID of the entity. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. TestEndPoint() Tests the endpoint of the controller. IActionResult TestEndPoint() Returns IActionResult An IActionResult representing the result of the test. UpdateAsync(TEntity) Updates an existing entity asynchronously. Task<IActionResult> UpdateAsync(TEntity entity) Parameters entity TEntity The entity to update. Returns Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult."
  },
  "api/QuickKit.AspNetCore.Controllers.html": {
    "href": "api/QuickKit.AspNetCore.Controllers.html",
    "title": "Namespace QuickKit.AspNetCore.Controllers | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Controllers Classes Controller<TEntity, TKey> Represents a base controller for CRUD operations on entities. Interfaces IController<TEntity, TKey> Represents a generic controller interface for CRUD operations on entities."
  },
  "api/QuickKit.AspNetCore.Middlewares.Requests.GlobalExceptionMiddlewareConfigurationRequest-1.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Requests.GlobalExceptionMiddlewareConfigurationRequest-1.html",
    "title": "Struct GlobalExceptionMiddlewareConfigurationRequest<TException> | QuickKit",
    "keywords": "Struct GlobalExceptionMiddlewareConfigurationRequest<TException> Namespace QuickKit.AspNetCore.Middlewares.Requests Assembly QuickKit.AspNetCore.dll Represents a configuration request for the GlobalExceptionMiddleware. public readonly struct GlobalExceptionMiddlewareConfigurationRequest<TException> where TException : Exception Type Parameters TException The type of exception to handle. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GlobalExceptionMiddlewareConfigurationRequest(RequestDelegate, TException, Func<HttpContext, TException, Task>) Initializes a new instance of the GlobalExceptionMiddlewareConfigurationRequest<TException>. public GlobalExceptionMiddlewareConfigurationRequest(RequestDelegate next, TException exception, Func<HttpContext, TException, Task> exceptionHandler) Parameters next RequestDelegate The next request delegate in the pipeline. exception TException The exception to handle. exceptionHandler Func<HttpContext, TException, Task> The async exception handler function. Properties Exception Gets or sets the exception to handle. public TException Exception { get; init; } Property Value TException ExceptionHandlerAsync Gets or sets the async exception handler function. public Func<HttpContext, TException, Task> ExceptionHandlerAsync { get; init; } Property Value Func<HttpContext, TException, Task> Next Gets or sets the next request delegate in the pipeline. public RequestDelegate Next { get; init; } Property Value RequestDelegate"
  },
  "api/QuickKit.AspNetCore.Middlewares.Requests.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Requests.html",
    "title": "Namespace QuickKit.AspNetCore.Middlewares.Requests | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Middlewares.Requests Structs GlobalExceptionMiddlewareConfigurationRequest<TException> Represents a configuration request for the GlobalExceptionMiddleware."
  },
  "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptiomMiddlewareCustom-1.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptiomMiddlewareCustom-1.html",
    "title": "Class GlobalExceptiomMiddlewareCustom<TException> | QuickKit",
    "keywords": "Class GlobalExceptiomMiddlewareCustom<TException> Namespace QuickKit.AspNetCore.Middlewares.Types Assembly QuickKit.AspNetCore.dll Represents a custom global exception middleware that handles a specific type of exception. public class GlobalExceptiomMiddlewareCustom<TException> where TException : Exception Type Parameters TException The type of exception to handle. Inheritance object GlobalExceptiomMiddlewareCustom<TException> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalExceptiomMiddlewareCustom(GlobalExceptionMiddlewareConfigurationRequest<TException>) Initializes a new instance of the GlobalExceptiomMiddlewareCustom<TException> class. public GlobalExceptiomMiddlewareCustom(GlobalExceptionMiddlewareConfigurationRequest<TException> config) Parameters config GlobalExceptionMiddlewareConfigurationRequest<TException> The configuration for the middleware. Methods InvokeAsync(HttpContext) Invokes the middleware asynchronously. public Task InvokeAsync(HttpContext context) Parameters context HttpContext The HTTP context. Returns Task A task representing the asynchronous operation."
  },
  "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptionMiddlewareDefault.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptionMiddlewareDefault.html",
    "title": "Class GlobalExceptionMiddlewareDefault | QuickKit",
    "keywords": "Class GlobalExceptionMiddlewareDefault Namespace QuickKit.AspNetCore.Middlewares.Types Assembly QuickKit.AspNetCore.dll Middleware for handling global exceptions in ASP.NET Core applications. public class GlobalExceptionMiddlewareDefault Inheritance object GlobalExceptionMiddlewareDefault Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalExceptionMiddlewareDefault(RequestDelegate, string, bool) Initializes a new instance of the GlobalExceptionMiddlewareDefault class. public GlobalExceptionMiddlewareDefault(RequestDelegate next, string defaultMessage = \"An error has occurred while processing your request\", bool showStackStrace = true) Parameters next RequestDelegate The next middleware in the pipeline. defaultMessage string The default error message to be returned. showStackStrace bool A flag indicating whether to include the stack trace in the error response. Methods InvokeAsync(HttpContext) Invokes the middleware. public Task InvokeAsync(HttpContext context) Parameters context HttpContext The HTTP context. Returns Task A task representing the asynchronous operation."
  },
  "api/QuickKit.AspNetCore.Middlewares.Types.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Types.html",
    "title": "Namespace QuickKit.AspNetCore.Middlewares.Types | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Middlewares.Types Classes GlobalExceptiomMiddlewareCustom<TException> Represents a custom global exception middleware that handles a specific type of exception. GlobalExceptionMiddlewareDefault Middleware for handling global exceptions in ASP.NET Core applications."
  },
  "api/QuickKit.Cmd.Consoler.html": {
    "href": "api/QuickKit.Cmd.Consoler.html",
    "title": "Class Consoler | QuickKit",
    "keywords": "Class Consoler Namespace QuickKit.Cmd Assembly QuickKit.Cmd.dll public class Consoler Inheritance object Consoler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read() public static int Read() Returns int ReadAs<T>(string, string, AlertType) public static T ReadAs<T>(string notNullAlertMessage, string convertFailedMessage, AlertType alertType = AlertType.Warning) where T : struct Parameters notNullAlertMessage string convertFailedMessage string alertType AlertType Returns T Type Parameters T ReadKey() public static ConsoleKey ReadKey() Returns ConsoleKey ReadKeyInfo() public static ConsoleKeyInfo ReadKeyInfo() Returns ConsoleKeyInfo ReadLine() public static string? ReadLine() Returns string ReadLine(string, AlertType) public static string ReadLine(string notNullAlertMessage, AlertType alertType = AlertType.Warning) Parameters notNullAlertMessage string alertType AlertType Returns string Write(string) public static void Write(string message) Parameters message string Write(string, AlertType) public static void Write(string message, AlertType type) Parameters message string type AlertType WriteLine(string) public static void WriteLine(string message) Parameters message string WriteLine(string, AlertType) public static void WriteLine(string message, AlertType type) Parameters message string type AlertType"
  },
  "api/QuickKit.Cmd.Enums.AlertType.html": {
    "href": "api/QuickKit.Cmd.Enums.AlertType.html",
    "title": "Enum AlertType | QuickKit",
    "keywords": "Enum AlertType Namespace QuickKit.Cmd.Enums Assembly QuickKit.Cmd.dll public enum AlertType Fields Error = 2 None = 0 Success = 3 Warning = 1"
  },
  "api/QuickKit.Cmd.Enums.html": {
    "href": "api/QuickKit.Cmd.Enums.html",
    "title": "Namespace QuickKit.Cmd.Enums | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Enums Enums AlertType"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenu.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenu.html",
    "title": "Interface IMenu | QuickKit",
    "keywords": "Interface IMenu Namespace QuickKit.Cmd.Menu.Interfaces Assembly QuickKit.Cmd.dll public interface IMenu Methods GoToOption(int) void GoToOption(int option) Parameters option int SelectOption() int SelectOption() Returns int Show() void Show() ShowInvalidOptionMessage(string, AlertType) void ShowInvalidOptionMessage(string message, AlertType alertType = AlertType.Warning) Parameters message string alertType AlertType ShowOptions() void ShowOptions()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenuMain.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenuMain.html",
    "title": "Interface IMenuMain | QuickKit",
    "keywords": "Interface IMenuMain Namespace QuickKit.Cmd.Menu.Interfaces Assembly QuickKit.Cmd.dll public interface IMenuMain : IMenu Inherited Members IMenu.Show() IMenu.ShowOptions() IMenu.ShowInvalidOptionMessage(string, AlertType) IMenu.SelectOption() IMenu.GoToOption(int) Methods Exit() void Exit()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenuNoOption.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenuNoOption.html",
    "title": "Interface IMenuNoOption | QuickKit",
    "keywords": "Interface IMenuNoOption Namespace QuickKit.Cmd.Menu.Interfaces Assembly QuickKit.Cmd.dll public interface IMenuNoOption Methods Show() void Show()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenuSub.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenuSub.html",
    "title": "Interface IMenuSub | QuickKit",
    "keywords": "Interface IMenuSub Namespace QuickKit.Cmd.Menu.Interfaces Assembly QuickKit.Cmd.dll public interface IMenuSub : IMenu Inherited Members IMenu.Show() IMenu.ShowOptions() IMenu.ShowInvalidOptionMessage(string, AlertType) IMenu.SelectOption() IMenu.GoToOption(int) Methods Back() void Back() ShowPreviousOption() void ShowPreviousOption()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.html",
    "title": "Namespace QuickKit.Cmd.Menu.Interfaces | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Menu.Interfaces Interfaces IMenu IMenuMain IMenuNoOption IMenuSub"
  },
  "api/QuickKit.Cmd.Menu.MenuMain.html": {
    "href": "api/QuickKit.Cmd.Menu.MenuMain.html",
    "title": "Class MenuMain | QuickKit",
    "keywords": "Class MenuMain Namespace QuickKit.Cmd.Menu Assembly QuickKit.Cmd.dll public abstract class MenuMain : IMenuMain, IMenu Inheritance object MenuMain Implements IMenuMain IMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Exit() public virtual void Exit() GoToOption(int) public abstract void GoToOption(int option) Parameters option int SelectOption() public abstract int SelectOption() Returns int Show() public virtual void Show() ShowInvalidOptionMessage(string, AlertType) public virtual void ShowInvalidOptionMessage(string message, AlertType alertType = AlertType.Warning) Parameters message string alertType AlertType ShowOptions() public abstract void ShowOptions()"
  },
  "api/QuickKit.Cmd.Menu.MenuNoOption.html": {
    "href": "api/QuickKit.Cmd.Menu.MenuNoOption.html",
    "title": "Class MenuNoOption | QuickKit",
    "keywords": "Class MenuNoOption Namespace QuickKit.Cmd.Menu Assembly QuickKit.Cmd.dll public abstract class MenuNoOption : IMenuNoOption Inheritance object MenuNoOption Implements IMenuNoOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Show() public abstract void Show()"
  },
  "api/QuickKit.Cmd.Menu.MenuSub.html": {
    "href": "api/QuickKit.Cmd.Menu.MenuSub.html",
    "title": "Class MenuSub | QuickKit",
    "keywords": "Class MenuSub Namespace QuickKit.Cmd.Menu Assembly QuickKit.Cmd.dll public abstract class MenuSub : IMenuSub, IMenu Inheritance object MenuSub Implements IMenuSub IMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NotNullAlertMessage protected abstract string NotNullAlertMessage { get; set; } Property Value string Methods Back() public virtual void Back() GoToOption(int) public abstract void GoToOption(int option) Parameters option int SelectOption() public virtual int SelectOption() Returns int Show() public abstract void Show() ShowInvalidOptionMessage(string, AlertType) public virtual void ShowInvalidOptionMessage(string message, AlertType alertType = AlertType.Warning) Parameters message string alertType AlertType ShowOptions() public abstract void ShowOptions() ShowPreviousOption() public abstract void ShowPreviousOption()"
  },
  "api/QuickKit.Cmd.Menu.html": {
    "href": "api/QuickKit.Cmd.Menu.html",
    "title": "Namespace QuickKit.Cmd.Menu | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Menu Classes MenuMain MenuNoOption MenuSub"
  },
  "api/QuickKit.Cmd.Shared.Alerter.html": {
    "href": "api/QuickKit.Cmd.Shared.Alerter.html",
    "title": "Class Alerter | QuickKit",
    "keywords": "Class Alerter Namespace QuickKit.Cmd.Shared Assembly QuickKit.Cmd.dll public class Alerter Inheritance object Alerter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Alert(string, ConsoleColor) public static void Alert(string message, ConsoleColor color) Parameters message string color ConsoleColor Error(string) public static void Error(string message) Parameters message string ShowAlert(string, AlertType) public static void ShowAlert(string text, AlertType type) Parameters text string type AlertType Success(string) public static void Success(string message) Parameters message string Warning(string) public static void Warning(string message) Parameters message string"
  },
  "api/QuickKit.Cmd.Shared.html": {
    "href": "api/QuickKit.Cmd.Shared.html",
    "title": "Namespace QuickKit.Cmd.Shared | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Shared Classes Alerter"
  },
  "api/QuickKit.Cmd.html": {
    "href": "api/QuickKit.Cmd.html",
    "title": "Namespace QuickKit.Cmd | QuickKit",
    "keywords": "Namespace QuickKit.Cmd Classes Consoler"
  },
  "api/QuickKit.Configuration.KitConfiguration.html": {
    "href": "api/QuickKit.Configuration.KitConfiguration.html",
    "title": "Class KitConfiguration | QuickKit",
    "keywords": "Class KitConfiguration Namespace QuickKit.Configuration Assembly QuickKit.dll Provides extension methods for configuring QuickKit. public static class KitConfiguration Inheritance object KitConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddQuickKit(IServiceCollection, string, Func<IDatabaseConnectionHandler>?) Adds QuickKit services to the specified IServiceCollection. public static IServiceCollection AddQuickKit(this IServiceCollection services, string connectionString, Func<IDatabaseConnectionHandler>? config = null) Parameters services IServiceCollection The IServiceCollection to add the services to. connectionString string The connection string to use for the database. config Func<IDatabaseConnectionHandler> An optional configuration function to customize the database connection handler. Returns IServiceCollection The modified IServiceCollection."
  },
  "api/QuickKit.Configuration.html": {
    "href": "api/QuickKit.Configuration.html",
    "title": "Namespace QuickKit.Configuration | QuickKit",
    "keywords": "Namespace QuickKit.Configuration Classes KitConfiguration Provides extension methods for configuring QuickKit."
  },
  "api/QuickKit.Repositories.Base.IRepository-2.html": {
    "href": "api/QuickKit.Repositories.Base.IRepository-2.html",
    "title": "Interface IRepository<TEntity, TKey> | QuickKit",
    "keywords": "Interface IRepository<TEntity, TKey> Namespace QuickKit.Repositories.Base Assembly QuickKit.dll Represents a generic repository interface for CRUD operations on entities. public interface IRepository<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters TEntity The type of the entity. TKey The type of the entity's primary key. Methods AddAsync(TEntity) Adds a new entity asynchronously. Task<int> AddAsync(TEntity entity) Parameters entity TEntity The entity to add. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. DeleteAsync(TKey) Deletes an entity by its primary key asynchronously. Task<int> DeleteAsync(TKey id) Parameters id TKey The primary key of the entity to delete. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. GetAllAsync() Retrieves all entities asynchronously. Task<IEnumerable<TEntity>> GetAllAsync() Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains the collection of entities. GetByIdAsync(TKey) Retrieves an entity by its primary key asynchronously. Task<TEntity?> GetByIdAsync(TKey id) Parameters id TKey The primary key of the entity. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity, or null if not found. GetByIdThrowAsync(TKey, string) Retrieves an entity by its primary key asynchronously, throwing an exception if not found. Task<TEntity> GetByIdThrowAsync(TKey id, string notFoundExceptionMessage) Parameters id TKey The primary key of the entity. notFoundExceptionMessage string The exception message to throw if the entity is not found. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity. UpdateAsync(TEntity) Updates an existing entity asynchronously. Task<int> UpdateAsync(TEntity entity) Parameters entity TEntity The entity to update. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows."
  },
  "api/QuickKit.Repositories.Base.Repository-2.html": {
    "href": "api/QuickKit.Repositories.Base.Repository-2.html",
    "title": "Class Repository<TEntity, TKey> | QuickKit",
    "keywords": "Class Repository<TEntity, TKey> Namespace QuickKit.Repositories.Base Assembly QuickKit.dll Base class for repositories that provides common functionality for CRUD operations on entities. public abstract class Repository<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters TEntity The type of the entity. TKey The type of the entity's primary key. Inheritance object Repository<TEntity, TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Repository(IValidator<TEntity>, IDatabaseConnectionHandler) Initializes a new instance of the Repository<TEntity, TKey> class. protected Repository(IValidator<TEntity> validator, IDatabaseConnectionHandler handler) Parameters validator IValidator<TEntity> The validator used for entity validation. handler IDatabaseConnectionHandler The database connection handler. Fields ProcedureNameAdd protected static readonly string ProcedureNameAdd Field Value string ProcedureNameDelete protected static readonly string ProcedureNameDelete Field Value string ProcedureNameGetAll protected static readonly string ProcedureNameGetAll Field Value string ProcedureNameGetById protected static readonly string ProcedureNameGetById Field Value string ProcedureNameUpdate protected static readonly string ProcedureNameUpdate Field Value string Methods AddAsync(TEntity) public abstract Task<int> AddAsync(TEntity entity) Parameters entity TEntity Returns Task<int> ConnectToDatabase() Connects to the database. protected virtual IDbConnection ConnectToDatabase() Returns IDbConnection The database connection. DeleteAsync(TKey) public abstract Task<int> DeleteAsync(TKey id) Parameters id TKey Returns Task<int> ExecuteAsync(TEntity, CommandDefinition, string) Executes a command on the database asynchronously after validating the entity. protected Task<int> ExecuteAsync(TEntity entity, CommandDefinition command, string validationFailureMessage) Parameters entity TEntity The entity to validate. command CommandDefinition The command to execute. validationFailureMessage string The validation failure message to use if the entity is not valid. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. ExecuteOnDatabaseAsync(CommandDefinition) Executes a command on the database asynchronously. protected virtual Task<int> ExecuteOnDatabaseAsync(CommandDefinition command) Parameters command CommandDefinition The command to execute. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. ExecuteOnTransactionAsync<TResult>(IDbConnection, Func<Task<TResult>>) Executes a command on the database within a transaction asynchronously. protected virtual Task<TResult> ExecuteOnTransactionAsync<TResult>(IDbConnection conn, Func<Task<TResult>> commandToExecute) Parameters conn IDbConnection The database connection. commandToExecute Func<Task<TResult>> The command to execute within the transaction. Returns Task<TResult> A task that represents the asynchronous operation. The task result contains the result of the command. Type Parameters TResult The type of the result. ExistsAsync(CommandDefinition) Checks if a record exists in the database based on the given command. protected Task<bool> ExistsAsync(CommandDefinition command) Parameters command CommandDefinition The command to execute. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating if the record exists. GetAllAsync() public abstract Task<IEnumerable<TEntity>> GetAllAsync() Returns Task<IEnumerable<TEntity>> GetByIdAsync(TKey) public abstract Task<TEntity?> GetByIdAsync(TKey id) Parameters id TKey Returns Task<TEntity> GetByIdThrowAsync(TKey, string) public virtual Task<TEntity> GetByIdThrowAsync(TKey id, string notFoundExceptionMessage) Parameters id TKey notFoundExceptionMessage string Returns Task<TEntity> QueryAsync<TResult>(CommandDefinition) Executes a query on the database asynchronously and returns the results as a collection of TResult. protected Task<IEnumerable<TResult>> QueryAsync<TResult>(CommandDefinition command) Parameters command CommandDefinition The command to execute. Returns Task<IEnumerable<TResult>> A task that represents the asynchronous operation. The task result contains the collection of results. Type Parameters TResult The type of the result. QuerySingleOrDefaultAsync<TResult>(CommandDefinition) Executes a query on the database asynchronously and returns the first result as TResult. protected Task<TResult?> QuerySingleOrDefaultAsync<TResult>(CommandDefinition command) Parameters command CommandDefinition The command to execute. Returns Task<TResult> A task that represents the asynchronous operation. The task result contains the first result, or null if not found. Type Parameters TResult The type of the result. UpdateAsync(TEntity) public abstract Task<int> UpdateAsync(TEntity entity) Parameters entity TEntity Returns Task<int>"
  },
  "api/QuickKit.Repositories.Base.html": {
    "href": "api/QuickKit.Repositories.Base.html",
    "title": "Namespace QuickKit.Repositories.Base | QuickKit",
    "keywords": "Namespace QuickKit.Repositories.Base Classes Repository<TEntity, TKey> Base class for repositories that provides common functionality for CRUD operations on entities. Interfaces IRepository<TEntity, TKey> Represents a generic repository interface for CRUD operations on entities."
  },
  "api/QuickKit.Security.Configuration.Jwt.JwtBearerConfiguration.html": {
    "href": "api/QuickKit.Security.Configuration.Jwt.JwtBearerConfiguration.html",
    "title": "Class JwtBearerConfiguration | QuickKit",
    "keywords": "Class JwtBearerConfiguration Namespace QuickKit.Security.Configuration.Jwt Assembly QuickKit.Security.dll Represents the configuration for JWT bearer authentication. public class JwtBearerConfiguration Inheritance object JwtBearerConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(IServiceCollection, byte[], string, string) Configures the services for JWT bearer authentication. public static void Configure(IServiceCollection services, byte[] key, string issuer, string audience) Parameters services IServiceCollection The collection of services to configure. key byte[] The byte array representing the secret key used for token validation. issuer string The issuer of the JWT tokens. audience string The audience of the JWT tokens."
  },
  "api/QuickKit.Security.Configuration.Jwt.html": {
    "href": "api/QuickKit.Security.Configuration.Jwt.html",
    "title": "Namespace QuickKit.Security.Configuration.Jwt | QuickKit",
    "keywords": "Namespace QuickKit.Security.Configuration.Jwt Classes JwtBearerConfiguration Represents the configuration for JWT bearer authentication."
  },
  "api/QuickKit.Security.Configuration.SecurityConfiguration.html": {
    "href": "api/QuickKit.Security.Configuration.SecurityConfiguration.html",
    "title": "Class SecurityConfiguration | QuickKit",
    "keywords": "Class SecurityConfiguration Namespace QuickKit.Security.Configuration Assembly QuickKit.Security.dll Provides methods to configure security settings. public static class SecurityConfiguration Inheritance object SecurityConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddJwtBearerKit(IServiceCollection, byte[], string, string) Adds JWT Bearer authentication to the specified IServiceCollection. public static IServiceCollection AddJwtBearerKit(this IServiceCollection services, byte[] key, string issuer, string audience) Parameters services IServiceCollection The IServiceCollection to add the authentication services to. key byte[] The byte array representing the secret key used for token generation and validation. issuer string The issuer of the JWT tokens. audience string The audience of the JWT tokens. Returns IServiceCollection The modified IServiceCollection."
  },
  "api/QuickKit.Security.Configuration.html": {
    "href": "api/QuickKit.Security.Configuration.html",
    "title": "Namespace QuickKit.Security.Configuration | QuickKit",
    "keywords": "Namespace QuickKit.Security.Configuration Classes SecurityConfiguration Provides methods to configure security settings."
  },
  "api/QuickKit.Security.Jwt.IJwtTokenGenerator.html": {
    "href": "api/QuickKit.Security.Jwt.IJwtTokenGenerator.html",
    "title": "Interface IJwtTokenGenerator | QuickKit",
    "keywords": "Interface IJwtTokenGenerator Namespace QuickKit.Security.Jwt Assembly QuickKit.Security.dll Represents an interface for generating JWT tokens. public interface IJwtTokenGenerator Methods Generate(JwtTokenRequest) Generates a JWT token based on the provided request. string Generate(JwtTokenRequest request) Parameters request JwtTokenRequest The request containing the necessary information for token generation. Returns string The generated JWT token."
  },
  "api/QuickKit.Security.Jwt.JwtTokenRequest.html": {
    "href": "api/QuickKit.Security.Jwt.JwtTokenRequest.html",
    "title": "Struct JwtTokenRequest | QuickKit",
    "keywords": "Struct JwtTokenRequest Namespace QuickKit.Security.Jwt Assembly QuickKit.Security.dll Represents a request for generating a JWT token. public readonly struct JwtTokenRequest Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors JwtTokenRequest(IEnumerable<Claim>, DateTime, string, string, string, DateTime?, string) Initializes a new instance of the JwtTokenRequest struct. public JwtTokenRequest(IEnumerable<Claim> claims, DateTime expires, string tokenKey, string issuer, string audience, DateTime? notBefore = null, string algorithm = \"HS256\") Parameters claims IEnumerable<Claim> The claims to include in the token. expires DateTime The expiration date and time of the token. tokenKey string The key used to sign the token. issuer string The issuer of the token. audience string The audience of the token. notBefore DateTime? The not-before date and time of the token. algorithm string The algorithm used to sign the token. Properties Algorithm public string Algorithm { get; init; } Property Value string Audience public string Audience { get; init; } Property Value string Claims public IEnumerable<Claim> Claims { get; init; } Property Value IEnumerable<Claim> Expires public DateTime Expires { get; init; } Property Value DateTime Issuer public string Issuer { get; init; } Property Value string NotBefore public DateTime? NotBefore { get; init; } Property Value DateTime? TokenKey public string TokenKey { get; init; } Property Value string"
  },
  "api/QuickKit.Security.Jwt.html": {
    "href": "api/QuickKit.Security.Jwt.html",
    "title": "Namespace QuickKit.Security.Jwt | QuickKit",
    "keywords": "Namespace QuickKit.Security.Jwt Structs JwtTokenRequest Represents a request for generating a JWT token. Interfaces IJwtTokenGenerator Represents an interface for generating JWT tokens."
  },
  "api/QuickKit.Shared.Builders.ProcedureNameEntityBuilder-1.html": {
    "href": "api/QuickKit.Shared.Builders.ProcedureNameEntityBuilder-1.html",
    "title": "Class ProcedureNameEntityBuilder<TEntity> | QuickKit",
    "keywords": "Class ProcedureNameEntityBuilder<TEntity> Namespace QuickKit.Shared.Builders Assembly QuickKit.dll Represents a builder class for generating procedure names based on the entity type. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the stored procedures in the database. Example: For a stored procedure for add a PersonEntity, the output would be \"sp_person_add\" public class ProcedureNameEntityBuilder<TEntity> where TEntity : IEntity Type Parameters TEntity The type of the entity. Inheritance object ProcedureNameEntityBuilder<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Add Gets the name for the \"Add\" procedure. public static string Add { get; } Property Value string Delete Gets the name for the \"Delete\" procedure. public static string Delete { get; } Property Value string GetAll Gets the name for the \"GetAll\" procedure. public static string GetAll { get; } Property Value string GetById Gets the name for the \"GetById\" procedure. public static string GetById { get; } Property Value string Update Gets the name for the \"Update\" procedure. public static string Update { get; } Property Value string Methods ExistsById() Gets the name for the \"ExistsById\" procedure. public static string ExistsById() Returns string The name for the \"ExistsById\" procedure."
  },
  "api/QuickKit.Shared.Builders.ViewNameEntityBuilder-1.html": {
    "href": "api/QuickKit.Shared.Builders.ViewNameEntityBuilder-1.html",
    "title": "Class ViewNameEntityBuilder<TEntity> | QuickKit",
    "keywords": "Class ViewNameEntityBuilder<TEntity> Namespace QuickKit.Shared.Builders Assembly QuickKit.dll Represents a builder class for generating view names for entities. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the views in the database. Example: For a view for all VoluntarioEntity, the output would be \"vw_voluntario_all\" public class ViewNameEntityBuilder<TEntity> where TEntity : IEntity Type Parameters TEntity The type of the entity. Inheritance object ViewNameEntityBuilder<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties All Gets the view name for all entities. public static string All { get; } Property Value string"
  },
  "api/QuickKit.Shared.Builders.html": {
    "href": "api/QuickKit.Shared.Builders.html",
    "title": "Namespace QuickKit.Shared.Builders | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Builders Classes ProcedureNameEntityBuilder<TEntity> Represents a builder class for generating procedure names based on the entity type. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the stored procedures in the database. Example: For a stored procedure for add a PersonEntity, the output would be \"sp_person_add\" ViewNameEntityBuilder<TEntity> Represents a builder class for generating view names for entities. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the views in the database. Example: For a view for all VoluntarioEntity, the output would be \"vw_voluntario_all\""
  },
  "api/QuickKit.Shared.Entities.IEntity-1.html": {
    "href": "api/QuickKit.Shared.Entities.IEntity-1.html",
    "title": "Interface IEntity<TKey> | QuickKit",
    "keywords": "Interface IEntity<TKey> Namespace QuickKit.Shared.Entities Assembly QuickKit.Shared.dll Represents an entity with a specified key. public interface IEntity<TKey> : IEntity where TKey : IConvertible Type Parameters TKey The type of the entity's key. Properties Id Gets or sets the entity's key. TKey Id { get; set; } Property Value TKey"
  },
  "api/QuickKit.Shared.Entities.IEntity-3.html": {
    "href": "api/QuickKit.Shared.Entities.IEntity-3.html",
    "title": "Interface IEntity<TEntity, TSnapshot, TKey> | QuickKit",
    "keywords": "Interface IEntity<TEntity, TSnapshot, TKey> Namespace QuickKit.Shared.Entities Assembly QuickKit.Shared.dll Represents an entity with a specified key, along with methods to convert to and from a snapshot. public interface IEntity<TEntity, TSnapshot, TKey> : IEntity<TKey>, IEntity where TEntity : IEntity<TKey> where TSnapshot : class where TKey : IConvertible Type Parameters TEntity The type of the entity. TSnapshot The type of the snapshot. TKey The type of the entity's key. Inherited Members IEntity<TKey>.Id Methods FromSnapshot(TSnapshot) Converts a snapshot to an entity. public static abstract TEntity FromSnapshot(TSnapshot snapshot) Parameters snapshot TSnapshot The snapshot to convert. Returns TEntity The converted entity. ToSnapshot() Converts the entity to a snapshot. TSnapshot ToSnapshot() Returns TSnapshot The snapshot representation of the entity."
  },
  "api/QuickKit.Shared.Entities.IEntity.html": {
    "href": "api/QuickKit.Shared.Entities.IEntity.html",
    "title": "Interface IEntity | QuickKit",
    "keywords": "Interface IEntity Namespace QuickKit.Shared.Entities Assembly QuickKit.Shared.dll Interface base for all entities used in the application. public interface IEntity Remarks -- DO NOT USE DIRECTLY ON ENTITIES -- Instead implements from IEntity<TKey> or IEntity<TEntity, TSnapshot, TKey> It is only used to identity entities, you can use it to do the same."
  },
  "api/QuickKit.Shared.Entities.html": {
    "href": "api/QuickKit.Shared.Entities.html",
    "title": "Namespace QuickKit.Shared.Entities | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Entities Interfaces IEntity Interface base for all entities used in the application. IEntity<TKey> Represents an entity with a specified key. IEntity<TEntity, TSnapshot, TKey> Represents an entity with a specified key, along with methods to convert to and from a snapshot."
  },
  "api/QuickKit.Shared.Exceptions.EntityNotFoundException.html": {
    "href": "api/QuickKit.Shared.Exceptions.EntityNotFoundException.html",
    "title": "Class EntityNotFoundException | QuickKit",
    "keywords": "Class EntityNotFoundException Namespace QuickKit.Shared.Exceptions Assembly QuickKit.Shared.dll Represents an exception that is thrown when an entity is not found. public class EntityNotFoundException : Exception, ISerializable Inheritance object Exception EntityNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EntityNotFoundException(string?) Initializes a new instance of the EntityNotFoundException class with a specified error message. public EntityNotFoundException(string? message) Parameters message string The error message that explains the reason for the exception."
  },
  "api/QuickKit.Shared.Exceptions.NotFoundException.html": {
    "href": "api/QuickKit.Shared.Exceptions.NotFoundException.html",
    "title": "Class NotFoundException | QuickKit",
    "keywords": "Class NotFoundException Namespace QuickKit.Shared.Exceptions Assembly QuickKit.Shared.dll Represents an exception that is thrown when a resource is not found. public class NotFoundException : Exception, ISerializable Inheritance object Exception NotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotFoundException(string) Initializes a new instance of the NotFoundException class with a specified error message. public NotFoundException(string message) Parameters message string The error message that explains the reason for the exception."
  },
  "api/QuickKit.Shared.Exceptions.SnapshotNullException.html": {
    "href": "api/QuickKit.Shared.Exceptions.SnapshotNullException.html",
    "title": "Class SnapshotNullException | QuickKit",
    "keywords": "Class SnapshotNullException Namespace QuickKit.Shared.Exceptions Assembly QuickKit.Shared.dll Represents an exception that is thrown when a snapshot is null. public class SnapshotNullException : Exception, ISerializable Inheritance object Exception SnapshotNullException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SnapshotNullException(string) Initializes a new instance of the SnapshotNullException class with a specified error message. public SnapshotNullException(string message) Parameters message string The error message that explains the reason for the exception."
  },
  "api/QuickKit.Shared.Exceptions.ValidationFailureException.html": {
    "href": "api/QuickKit.Shared.Exceptions.ValidationFailureException.html",
    "title": "Class ValidationFailureException | QuickKit",
    "keywords": "Class ValidationFailureException Namespace QuickKit.Shared.Exceptions Assembly QuickKit.Shared.dll Represents an exception that occurs when a validation failure is encountered. public class ValidationFailureException : Exception, ISerializable Inheritance object Exception ValidationFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ValidationFailureException(ValidationResult, string?) Initializes a new instance of the ValidationFailureException class with the specified validation result and message. public ValidationFailureException(ValidationResult result, string? message) Parameters result ValidationResult The validation result associated with the exception. message string The error message that explains the reason for the exception. Properties Result Gets the validation result associated with the exception. public ValidationResult Result { get; } Property Value ValidationResult"
  },
  "api/QuickKit.Shared.Exceptions.html": {
    "href": "api/QuickKit.Shared.Exceptions.html",
    "title": "Namespace QuickKit.Shared.Exceptions | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Exceptions Classes EntityNotFoundException Represents an exception that is thrown when an entity is not found. NotFoundException Represents an exception that is thrown when a resource is not found. SnapshotNullException Represents an exception that is thrown when a snapshot is null. ValidationFailureException Represents an exception that occurs when a validation failure is encountered."
  },
  "api/QuickKit.Shared.Extensions.StringExtensions.html": {
    "href": "api/QuickKit.Shared.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | QuickKit",
    "keywords": "Class StringExtensions Namespace QuickKit.Shared.Extensions Assembly QuickKit.Shared.dll public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsEmpty(string?) Determines whether the specified string is empty, null, or consists only of white-space characters. public static bool IsEmpty(this string? value) Parameters value string The string to check. Returns bool true if the string is empty, null, or consists only of white-space characters; otherwise, false. IsHigherOrEqualThan(string?, int) Determines whether the length of the specified string is higher than or equal to the specified length. public static bool IsHigherOrEqualThan(this string? value, int length) Parameters value string The string to check. length int The length to compare against. Returns bool true if the length of the string is higher than or equal to the specified length; otherwise, false. IsHigherThan(string?, int) Determines whether the length of the specified string is higher than the specified length. public static bool IsHigherThan(this string? value, int length) Parameters value string The string to check. length int The length to compare against. Returns bool true if the length of the string is higher than the specified length; otherwise, false. IsLowerOrEqualThan(string?, int) Determines whether the length of the specified string is lower than or equal to the specified length. public static bool IsLowerOrEqualThan(this string? value, int length) Parameters value string The string to check. length int The length to compare against. Returns bool true if the length of the string is lower than or equal to the specified length; otherwise, false. IsLowerThan(string?, int) Determines whether the length of the specified string is lower than the specified length. public static bool IsLowerThan(this string? value, int length) Parameters value string The string to check. length int The length to compare against. Returns bool true if the length of the string is lower than the specified length; otherwise, false. ToBool(string) Converts the specified string to a boolean. public static bool ToBool(this string value) Parameters value string The string to convert. Returns bool The converted boolean value. ToDateOnly(string) Converts the specified string to a DateOnly. public static DateOnly ToDateOnly(this string value) Parameters value string The string to convert. Returns DateOnly The converted DateOnly value. ToDateTime(string) Converts the specified string to a DateTime. public static DateTime ToDateTime(this string value) Parameters value string The string to convert. Returns DateTime The converted DateTime value. ToDecimal(string) Converts the specified string to a decimal. public static decimal ToDecimal(this string value) Parameters value string The string to convert. Returns decimal The converted decimal value. ToDouble(string) Converts the specified string to a double. public static double ToDouble(this string value) Parameters value string The string to convert. Returns double The converted double value. ToInt(string) Converts the specified string to an integer. public static int ToInt(this string value) Parameters value string The string to convert. Returns int The converted integer value. To<TType>(string) Converts the specified string to the specified type. public static TType To<TType>(this string value) where TType : struct Parameters value string The string to convert. Returns TType The converted value of the specified type. Type Parameters TType The type to convert the string to."
  },
  "api/QuickKit.Shared.Extensions.html": {
    "href": "api/QuickKit.Shared.Extensions.html",
    "title": "Namespace QuickKit.Shared.Extensions | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Extensions Classes StringExtensions"
  },
  "api/QuickKit.Shared.Handlers.IDatabaseConnectionHandler.html": {
    "href": "api/QuickKit.Shared.Handlers.IDatabaseConnectionHandler.html",
    "title": "Interface IDatabaseConnectionHandler | QuickKit",
    "keywords": "Interface IDatabaseConnectionHandler Namespace QuickKit.Shared.Handlers Assembly QuickKit.dll Represents a handler for establishing database connections. public interface IDatabaseConnectionHandler Methods Connect() Connects to the database and returns a database connection object. IDbConnection Connect() Returns IDbConnection The database connection object."
  },
  "api/QuickKit.Shared.Handlers.html": {
    "href": "api/QuickKit.Shared.Handlers.html",
    "title": "Namespace QuickKit.Shared.Handlers | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Handlers Interfaces IDatabaseConnectionHandler Represents a handler for establishing database connections."
  },
  "api/QuickKit.Shared.Services.IService-2.html": {
    "href": "api/QuickKit.Shared.Services.IService-2.html",
    "title": "Interface IService<TEntity, TKey> | QuickKit",
    "keywords": "Interface IService<TEntity, TKey> Namespace QuickKit.Shared.Services Assembly QuickKit.Shared.dll Represents a generic service interface for performing CRUD operations on entities. public interface IService<TEntity, TKey> Type Parameters TEntity The type of the entity. TKey The type of the entity's primary key. Methods AddAsync(TEntity) Adds a new entity asynchronously. Task AddAsync(TEntity entity) Parameters entity TEntity The entity to add. Returns Task A task that represents the asynchronous operation. DeleteAsync(TKey) Deletes an entity by its primary key asynchronously. Task DeleteAsync(TKey id) Parameters id TKey The primary key of the entity to delete. Returns Task A task that represents the asynchronous operation. GetAllAsync() Retrieves all entities asynchronously. Task<IEnumerable<TEntity>> GetAllAsync() Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains the collection of entities. GetByIdAsync(TKey) Retrieves an entity by its primary key asynchronously. Task<TEntity> GetByIdAsync(TKey id) Parameters id TKey The primary key of the entity. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity. UpdateAsync(TEntity) Updates an existing entity asynchronously. Task UpdateAsync(TEntity entity) Parameters entity TEntity The entity to update. Returns Task A task that represents the asynchronous operation."
  },
  "api/QuickKit.Shared.Services.html": {
    "href": "api/QuickKit.Shared.Services.html",
    "title": "Namespace QuickKit.Shared.Services | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Services Interfaces IService<TEntity, TKey> Represents a generic service interface for performing CRUD operations on entities."
  },
  "api/QuickKit.Shared.Validations.Common.Validator-1.html": {
    "href": "api/QuickKit.Shared.Validations.Common.Validator-1.html",
    "title": "Class Validator<TEntity> | QuickKit",
    "keywords": "Class Validator<TEntity> Namespace QuickKit.Shared.Validations.Common Assembly QuickKit.Shared.dll Represents a base class for validators used to validate entities. Inhrerit from this class to create a validator for a specific entity. This class uses the FluentValidation library to perform the validation. public abstract class Validator<TEntity> : AbstractValidator<TEntity>, IValidator<TEntity>, IValidator, IEnumerable<IValidationRule>, IEnumerable where TEntity : IEntity Type Parameters TEntity The type of entity to be validated. Inheritance object AbstractValidator<TEntity> Validator<TEntity> Implements IValidator<TEntity> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<TEntity>.Validate(TEntity) AbstractValidator<TEntity>.ValidateAsync(TEntity, CancellationToken) AbstractValidator<TEntity>.Validate(ValidationContext<TEntity>) AbstractValidator<TEntity>.ValidateAsync(ValidationContext<TEntity>, CancellationToken) AbstractValidator<TEntity>.CreateDescriptor() AbstractValidator<TEntity>.RuleFor<TProperty>(Expression<Func<TEntity, TProperty>>) AbstractValidator<TEntity>.Transform<TProperty, TTransformed>(Expression<Func<TEntity, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<TEntity>.Transform<TProperty, TTransformed>(Expression<Func<TEntity, TProperty>>, Func<TEntity, TProperty, TTransformed>) AbstractValidator<TEntity>.RuleForEach<TElement>(Expression<Func<TEntity, IEnumerable<TElement>>>) AbstractValidator<TEntity>.TransformForEach<TElement, TTransformed>(Expression<Func<TEntity, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<TEntity>.TransformForEach<TElement, TTransformed>(Expression<Func<TEntity, IEnumerable<TElement>>>, Func<TEntity, TElement, TTransformed>) AbstractValidator<TEntity>.RuleSet(string, Action) AbstractValidator<TEntity>.When(Func<TEntity, bool>, Action) AbstractValidator<TEntity>.When(Func<TEntity, ValidationContext<TEntity>, bool>, Action) AbstractValidator<TEntity>.Unless(Func<TEntity, bool>, Action) AbstractValidator<TEntity>.Unless(Func<TEntity, ValidationContext<TEntity>, bool>, Action) AbstractValidator<TEntity>.WhenAsync(Func<TEntity, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.WhenAsync(Func<TEntity, ValidationContext<TEntity>, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.UnlessAsync(Func<TEntity, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.UnlessAsync(Func<TEntity, ValidationContext<TEntity>, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.Include(IValidator<TEntity>) AbstractValidator<TEntity>.Include<TValidator>(Func<TEntity, TValidator>) AbstractValidator<TEntity>.GetEnumerator() AbstractValidator<TEntity>.EnsureInstanceNotNull(object) AbstractValidator<TEntity>.PreValidate(ValidationContext<TEntity>, ValidationResult) AbstractValidator<TEntity>.RaiseValidationException(ValidationContext<TEntity>, ValidationResult) AbstractValidator<TEntity>.OnRuleAdded(IValidationRule<TEntity>) AbstractValidator<TEntity>.CascadeMode AbstractValidator<TEntity>.ClassLevelCascadeMode AbstractValidator<TEntity>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FluentValidationExtension.ValidateThrowAsync<TEntity>(IValidator<TEntity>, TEntity, string)"
  },
  "api/QuickKit.Shared.Validations.Common.html": {
    "href": "api/QuickKit.Shared.Validations.Common.html",
    "title": "Namespace QuickKit.Shared.Validations.Common | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Validations.Common Classes Validator<TEntity> Represents a base class for validators used to validate entities. Inhrerit from this class to create a validator for a specific entity. This class uses the FluentValidation library to perform the validation."
  },
  "api/QuickKit.Shared.Validations.Extensions.FluentValidationExtension.html": {
    "href": "api/QuickKit.Shared.Validations.Extensions.FluentValidationExtension.html",
    "title": "Class FluentValidationExtension | QuickKit",
    "keywords": "Class FluentValidationExtension Namespace QuickKit.Shared.Validations.Extensions Assembly QuickKit.Shared.dll public static class FluentValidationExtension Inheritance object FluentValidationExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ValidateThrowAsync<TEntity>(IValidator<TEntity>, TEntity, string) Validates the specified entity using the provided validator and throws a ValidationFailureException if the validation fails. public static Task ValidateThrowAsync<TEntity>(this IValidator<TEntity> validator, TEntity entity, string exceptionMessage) where TEntity : IEntity Parameters validator IValidator<TEntity> The validator to use for validation. entity TEntity The entity to validate. exceptionMessage string The exception message to include if the validation fails. Returns Task A task representing the asynchronous operation. Type Parameters TEntity The type of the entity to validate."
  },
  "api/QuickKit.Shared.Validations.Extensions.html": {
    "href": "api/QuickKit.Shared.Validations.Extensions.html",
    "title": "Namespace QuickKit.Shared.Validations.Extensions | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Validations.Extensions Classes FluentValidationExtension"
  },
  "api/QuickKit.Tests.Repositories.RepositoryBaseTests.html": {
    "href": "api/QuickKit.Tests.Repositories.RepositoryBaseTests.html",
    "title": "Class RepositoryBaseTests | QuickKit",
    "keywords": "Class RepositoryBaseTests Namespace QuickKit.Tests.Repositories Assembly QuickKit.Tests.dll public class RepositoryBaseTests Inheritance object RepositoryBaseTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add_ShouldComplete() [Fact] public Task Add_ShouldComplete() Returns Task"
  },
  "api/QuickKit.Tests.Repositories.TestEntities.PersonEntity.html": {
    "href": "api/QuickKit.Tests.Repositories.TestEntities.PersonEntity.html",
    "title": "Class PersonEntity | QuickKit",
    "keywords": "Class PersonEntity Namespace QuickKit.Tests.Repositories.TestEntities Assembly QuickKit.Tests.dll public class PersonEntity : IEntity Inheritance object PersonEntity Implements IEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public int Id { get; set; } Property Value int"
  },
  "api/QuickKit.Tests.Repositories.TestEntities.html": {
    "href": "api/QuickKit.Tests.Repositories.TestEntities.html",
    "title": "Namespace QuickKit.Tests.Repositories.TestEntities | QuickKit",
    "keywords": "Namespace QuickKit.Tests.Repositories.TestEntities Classes PersonEntity"
  },
  "api/QuickKit.Tests.Repositories.html": {
    "href": "api/QuickKit.Tests.Repositories.html",
    "title": "Namespace QuickKit.Tests.Repositories | QuickKit",
    "keywords": "Namespace QuickKit.Tests.Repositories Classes RepositoryBaseTests"
  },
  "api/QuickKit.Tests.Shared.Builders.ProcedureNameEntityBuilderTests.html": {
    "href": "api/QuickKit.Tests.Shared.Builders.ProcedureNameEntityBuilderTests.html",
    "title": "Class ProcedureNameEntityBuilderTests | QuickKit",
    "keywords": "Class ProcedureNameEntityBuilderTests Namespace QuickKit.Tests.Shared.Builders Assembly QuickKit.Tests.dll public class ProcedureNameEntityBuilderTests Inheritance object ProcedureNameEntityBuilderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Builder_WhenCalled_ShouldReturnProcedureNameWithoutEntity() [Fact] public void Builder_WhenCalled_ShouldReturnProcedureNameWithoutEntity()"
  },
  "api/QuickKit.Tests.Shared.Builders.ViewNameEntityBuilderTests.html": {
    "href": "api/QuickKit.Tests.Shared.Builders.ViewNameEntityBuilderTests.html",
    "title": "Class ViewNameEntityBuilderTests | QuickKit",
    "keywords": "Class ViewNameEntityBuilderTests Namespace QuickKit.Tests.Shared.Builders Assembly QuickKit.Tests.dll public class ViewNameEntityBuilderTests Inheritance object ViewNameEntityBuilderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Build_shouldReturnViewNameWithoutEntity() [Fact] public void Build_shouldReturnViewNameWithoutEntity()"
  },
  "api/QuickKit.Tests.Shared.Builders.html": {
    "href": "api/QuickKit.Tests.Shared.Builders.html",
    "title": "Namespace QuickKit.Tests.Shared.Builders | QuickKit",
    "keywords": "Namespace QuickKit.Tests.Shared.Builders Classes ProcedureNameEntityBuilderTests ViewNameEntityBuilderTests"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | QuickKit",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | QuickKit",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | QuickKit",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}