{
  "api/QuickKit.AspNetCore.Attributes.HttpAddKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpAddKit.html",
    "title": "Class HttpAddKit | QuickKit",
    "keywords": "Class HttpAddKit Represents an attribute that is used to add a resource using HTTP POST method. Does not define the data. Does not define the response. Uses the naming convention from ADD Inheritance object Attribute HttpMethodAttribute HttpPostAttribute HttpAddKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Attributes Assembly: QuickKit.AspNetCore.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpAddKit : HttpPostAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Constructors | Edit this page View Source HttpAddKit(string) Initializes a new instance of the HttpAddKit class with the specified template. Declaration public HttpAddKit(string template = \"add\") Parameters Type Name Description string template The template for the endpoint. Implements IActionHttpMethodProvider IRouteTemplateProvider"
  },
  "api/QuickKit.AspNetCore.Attributes.HttpDeleteKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpDeleteKit.html",
    "title": "Class HttpDeleteKit | QuickKit",
    "keywords": "Class HttpDeleteKit Represents an attribute that specifies that an action method should be accessible via HTTP DELETE requests. Does not define the data. Does not define the response. Uses the naming convention from DELETE Inheritance object Attribute HttpMethodAttribute HttpDeleteAttribute HttpDeleteKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Attributes Assembly: QuickKit.AspNetCore.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpDeleteKit : HttpDeleteAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Constructors | Edit this page View Source HttpDeleteKit(string) Initializes a new instance of the HttpDeleteKit class with the specified template. Declaration public HttpDeleteKit(string template = \"delete\") Parameters Type Name Description string template The template for the endpoint. Implements IActionHttpMethodProvider IRouteTemplateProvider"
  },
  "api/QuickKit.AspNetCore.Attributes.HttpGetAllKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpGetAllKit.html",
    "title": "Class HttpGetAllKit | QuickKit",
    "keywords": "Class HttpGetAllKit Represents an attribute that specifies an HTTP GET request to retrieve all data. Does not define the data. Does not define the response. Uses the naming convention from GET_ALL Inheritance object Attribute HttpMethodAttribute HttpGetAttribute HttpGetAllKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Attributes Assembly: QuickKit.AspNetCore.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpGetAllKit : HttpGetAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Constructors | Edit this page View Source HttpGetAllKit(string) Initializes a new instance of the HttpGetAllKit class with the specified template. Declaration public HttpGetAllKit(string template = \"\") Parameters Type Name Description string template The template for the endpoint. Implements IActionHttpMethodProvider IRouteTemplateProvider"
  },
  "api/QuickKit.AspNetCore.Attributes.HttpGetByIdKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpGetByIdKit.html",
    "title": "Class HttpGetByIdKit | QuickKit",
    "keywords": "Class HttpGetByIdKit Represents an attribute that specifies an HTTP GET request for retrieving a resource by its ID. Does not define the data. Does not define the response. Uses the naming convention from GET_BY_ID Inheritance object Attribute HttpMethodAttribute HttpGetAttribute HttpGetByIdKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Attributes Assembly: QuickKit.AspNetCore.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpGetByIdKit : HttpGetAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Constructors | Edit this page View Source HttpGetByIdKit(string) Initializes a new instance of the HttpGetByIdKit class with the specified template. Does not define the data. Does not define the response. Uses the naming convention from GET_BY_ID Declaration public HttpGetByIdKit(string template = \"{id}\") Parameters Type Name Description string template The template for the endpoint. Implements IActionHttpMethodProvider IRouteTemplateProvider"
  },
  "api/QuickKit.AspNetCore.Attributes.HttpGetTestEndPointKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpGetTestEndPointKit.html",
    "title": "Class HttpGetTestEndPointKit | QuickKit",
    "keywords": "Class HttpGetTestEndPointKit Represents an attribute that specifies an HTTP GET for test endpoint. Does not define the data. Does not define the response. Uses the naming convention from TEST Inheritance object Attribute HttpMethodAttribute HttpGetAttribute HttpGetTestEndPointKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Attributes Assembly: QuickKit.AspNetCore.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpGetTestEndPointKit : HttpGetAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Constructors | Edit this page View Source HttpGetTestEndPointKit(string) Initializes a new instance of the HttpGetTestEndPointKit class with the specified template. Declaration public HttpGetTestEndPointKit(string template = \"test\") Parameters Type Name Description string template The template for the endpoint. Implements IActionHttpMethodProvider IRouteTemplateProvider"
  },
  "api/QuickKit.AspNetCore.Attributes.HttpUpdateKit.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.HttpUpdateKit.html",
    "title": "Class HttpUpdateKit | QuickKit",
    "keywords": "Class HttpUpdateKit Represents an attribute that is used to decorate a method as an HTTP update endpoint. Does not define the data. Does not define the response. Uses the naming convention from UPDATE Inheritance object Attribute HttpMethodAttribute HttpPutAttribute HttpUpdateKit Implements IActionHttpMethodProvider IRouteTemplateProvider Inherited Members HttpMethodAttribute.HttpMethods HttpMethodAttribute.Template HttpMethodAttribute.Order HttpMethodAttribute.Name Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Attributes Assembly: QuickKit.AspNetCore.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HttpUpdateKit : HttpPutAttribute, IActionHttpMethodProvider, IRouteTemplateProvider Constructors | Edit this page View Source HttpUpdateKit(string) Initializes a new instance of the HttpUpdateKit class with the specified template. Declaration public HttpUpdateKit(string template = \"update\") Parameters Type Name Description string template The template for the endpoint. Implements IActionHttpMethodProvider IRouteTemplateProvider"
  },
  "api/QuickKit.AspNetCore.Attributes.html": {
    "href": "api/QuickKit.AspNetCore.Attributes.html",
    "title": "Namespace QuickKit.AspNetCore.Attributes | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Attributes Classes HttpAddKit Represents an attribute that is used to add a resource using HTTP POST method. Does not define the data. Does not define the response. Uses the naming convention from ADD HttpDeleteKit Represents an attribute that specifies that an action method should be accessible via HTTP DELETE requests. Does not define the data. Does not define the response. Uses the naming convention from DELETE HttpGetAllKit Represents an attribute that specifies an HTTP GET request to retrieve all data. Does not define the data. Does not define the response. Uses the naming convention from GET_ALL HttpGetByIdKit Represents an attribute that specifies an HTTP GET request for retrieving a resource by its ID. Does not define the data. Does not define the response. Uses the naming convention from GET_BY_ID HttpGetTestEndPointKit Represents an attribute that specifies an HTTP GET for test endpoint. Does not define the data. Does not define the response. Uses the naming convention from TEST HttpUpdateKit Represents an attribute that is used to decorate a method as an HTTP update endpoint. Does not define the data. Does not define the response. Uses the naming convention from UPDATE"
  },
  "api/QuickKit.AspNetCore.Configuration.AspNetCoreConfiguration.html": {
    "href": "api/QuickKit.AspNetCore.Configuration.AspNetCoreConfiguration.html",
    "title": "Class AspNetCoreConfiguration | QuickKit",
    "keywords": "Class AspNetCoreConfiguration Provides extension methods for configuring ASP.NET Core middleware related to global exception handling. Inheritance object AspNetCoreConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Configuration Assembly: QuickKit.AspNetCore.dll Syntax public static class AspNetCoreConfiguration Methods | Edit this page View Source AddCustomGlobalExceptionMiddleware<TException>(IApplicationBuilder, GlobalExceptionMiddlewareConfigurationRequest<TException>) Adds custom global exception middleware to the application pipeline. Declaration public static IApplicationBuilder AddCustomGlobalExceptionMiddleware<TException>(this IApplicationBuilder app, GlobalExceptionMiddlewareConfigurationRequest<TException> config) where TException : Exception Parameters Type Name Description IApplicationBuilder app The IApplicationBuilder instance. GlobalExceptionMiddlewareConfigurationRequest<TException> config The configuration for the custom global exception middleware. Returns Type Description IApplicationBuilder The IApplicationBuilder instance. Type Parameters Name Description TException The type of exception to be handled by the middleware. | Edit this page View Source AddDefaultGlobalExceptionMiddleware(IApplicationBuilder, string, bool) Adds the default global exception middleware to the application pipeline. Declaration public static IApplicationBuilder AddDefaultGlobalExceptionMiddleware(this IApplicationBuilder app, string defaultMessage = \"An error has occurred while processing your request\", bool showStackTrace = true) Parameters Type Name Description IApplicationBuilder app The IApplicationBuilder instance. string defaultMessage The default error message to be displayed when an exception occurs. bool showStackTrace A flag indicating whether to include the stack trace in the error message. Returns Type Description IApplicationBuilder The IApplicationBuilder instance."
  },
  "api/QuickKit.AspNetCore.Configuration.html": {
    "href": "api/QuickKit.AspNetCore.Configuration.html",
    "title": "Namespace QuickKit.AspNetCore.Configuration | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Configuration Classes AspNetCoreConfiguration Provides extension methods for configuring ASP.NET Core middleware related to global exception handling."
  },
  "api/QuickKit.AspNetCore.Constants.ENDPOINT_NAME_CNT_KIT.html": {
    "href": "api/QuickKit.AspNetCore.Constants.ENDPOINT_NAME_CNT_KIT.html",
    "title": "Struct ENDPOINT_NAME_CNT_KIT | QuickKit",
    "keywords": "Struct ENDPOINT_NAME_CNT_KIT Contains the endpoint naming conventions from the QuickKit Framework. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuickKit.AspNetCore.Constants Assembly: QuickKit.AspNetCore.dll Syntax public readonly struct ENDPOINT_NAME_CNT_KIT Fields | Edit this page View Source ADD Represents the \"add\" endpoint. Declaration public const string ADD = \"add\" Field Value Type Description string | Edit this page View Source DELETE Represents the \"delete\" endpoint. Declaration public const string DELETE = \"delete\" Field Value Type Description string | Edit this page View Source GET_ALL Represents the \"get all\" endpoint. Declaration public const string GET_ALL = \"\" Field Value Type Description string | Edit this page View Source GET_BY_ID Represents the \"get by id\" endpoint with a placeholder for the ID. Declaration public const string GET_BY_ID = \"{id}\" Field Value Type Description string | Edit this page View Source TEST Represents the \"test\" endpoint. Declaration public const string TEST = \"test\" Field Value Type Description string | Edit this page View Source UPDATE Represents the \"update\" endpoint. Declaration public const string UPDATE = \"update\" Field Value Type Description string"
  },
  "api/QuickKit.AspNetCore.Constants.html": {
    "href": "api/QuickKit.AspNetCore.Constants.html",
    "title": "Namespace QuickKit.AspNetCore.Constants | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Constants Structs ENDPOINT_NAME_CNT_KIT Contains the endpoint naming conventions from the QuickKit Framework."
  },
  "api/QuickKit.AspNetCore.Controllers.Controller-2.html": {
    "href": "api/QuickKit.AspNetCore.Controllers.Controller-2.html",
    "title": "Class Controller<TEntity, TKey> | QuickKit",
    "keywords": "Class Controller<TEntity, TKey> Represents a base controller for CRUD operations on entities. Inheritance object ControllerBase Controller<TEntity, TKey> Implements IController<TEntity, TKey> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Controllers Assembly: QuickKit.AspNetCore.dll Syntax public abstract class Controller<TEntity, TKey> : ControllerBase, IController<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters Name Description TEntity The type of the entity. TKey The type of the entity's key. Methods | Edit this page View Source AddAsync(TEntity) Adds a new entity asynchronously. Declaration public abstract Task<IActionResult> AddAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to add. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source DeleteAsync(TKey) Deletes an entity by its ID asynchronously. Declaration public abstract Task<IActionResult> DeleteAsync(TKey id) Parameters Type Name Description TKey id The ID of the entity to delete. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source GetAllAsync() Retrieves all entities asynchronously. Declaration public abstract Task<IActionResult> GetAllAsync() Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source GetByIdAsync(TKey) Retrieves an entity by its ID asynchronously. Declaration public abstract Task<IActionResult> GetByIdAsync(TKey id) Parameters Type Name Description TKey id The ID of the entity. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source TestEndPoint() Tests the endpoint of the controller. Declaration public abstract IActionResult TestEndPoint() Returns Type Description IActionResult An IActionResult representing the result of the test. | Edit this page View Source UpdateAsync(TEntity) Updates an existing entity asynchronously. Declaration public abstract Task<IActionResult> UpdateAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to update. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. Implements IController<TEntity, TKey>"
  },
  "api/QuickKit.AspNetCore.Controllers.IController-2.html": {
    "href": "api/QuickKit.AspNetCore.Controllers.IController-2.html",
    "title": "Interface IController<TEntity, TKey> | QuickKit",
    "keywords": "Interface IController<TEntity, TKey> Represents a generic controller interface for CRUD operations on entities. Namespace: QuickKit.AspNetCore.Controllers Assembly: QuickKit.AspNetCore.dll Syntax public interface IController<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters Name Description TEntity The type of the entity. TKey The type of the entity's primary key. Methods | Edit this page View Source AddAsync(TEntity) Adds a new entity asynchronously. Declaration Task<IActionResult> AddAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to add. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source DeleteAsync(TKey) Deletes an entity by its ID asynchronously. Declaration Task<IActionResult> DeleteAsync(TKey id) Parameters Type Name Description TKey id The ID of the entity to delete. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source GetAllAsync() Retrieves all entities asynchronously. Declaration Task<IActionResult> GetAllAsync() Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source GetByIdAsync(TKey) Retrieves an entity by its ID asynchronously. Declaration Task<IActionResult> GetByIdAsync(TKey id) Parameters Type Name Description TKey id The ID of the entity. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult. | Edit this page View Source TestEndPoint() Tests the endpoint of the controller. Declaration IActionResult TestEndPoint() Returns Type Description IActionResult An IActionResult representing the result of the test. | Edit this page View Source UpdateAsync(TEntity) Updates an existing entity asynchronously. Declaration Task<IActionResult> UpdateAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to update. Returns Type Description Task<IActionResult> A Task<TResult> representing the asynchronous operation, containing an IActionResult."
  },
  "api/QuickKit.AspNetCore.Controllers.html": {
    "href": "api/QuickKit.AspNetCore.Controllers.html",
    "title": "Namespace QuickKit.AspNetCore.Controllers | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Controllers Classes Controller<TEntity, TKey> Represents a base controller for CRUD operations on entities. Interfaces IController<TEntity, TKey> Represents a generic controller interface for CRUD operations on entities."
  },
  "api/QuickKit.AspNetCore.Middlewares.Requests.GlobalExceptionMiddlewareConfigurationRequest-1.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Requests.GlobalExceptionMiddlewareConfigurationRequest-1.html",
    "title": "Struct GlobalExceptionMiddlewareConfigurationRequest<TException> | QuickKit",
    "keywords": "Struct GlobalExceptionMiddlewareConfigurationRequest<TException> Represents a configuration request for the GlobalExceptionMiddleware. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuickKit.AspNetCore.Middlewares.Requests Assembly: QuickKit.AspNetCore.dll Syntax public readonly struct GlobalExceptionMiddlewareConfigurationRequest<TException> where TException : Exception Type Parameters Name Description TException The type of exception to handle. Constructors | Edit this page View Source GlobalExceptionMiddlewareConfigurationRequest(RequestDelegate, TException, Func<HttpContext, TException, Task>) Initializes a new instance of the GlobalExceptionMiddlewareConfigurationRequest<TException>. Declaration public GlobalExceptionMiddlewareConfigurationRequest(RequestDelegate next, TException exception, Func<HttpContext, TException, Task> exceptionHandler) Parameters Type Name Description RequestDelegate next The next request delegate in the pipeline. TException exception The exception to handle. Func<HttpContext, TException, Task> exceptionHandler The async exception handler function. Properties | Edit this page View Source Exception Gets or sets the exception to handle. Declaration public TException Exception { get; init; } Property Value Type Description TException | Edit this page View Source ExceptionHandlerAsync Gets or sets the async exception handler function. Declaration public Func<HttpContext, TException, Task> ExceptionHandlerAsync { get; init; } Property Value Type Description Func<HttpContext, TException, Task> | Edit this page View Source Next Gets or sets the next request delegate in the pipeline. Declaration public RequestDelegate Next { get; init; } Property Value Type Description RequestDelegate"
  },
  "api/QuickKit.AspNetCore.Middlewares.Requests.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Requests.html",
    "title": "Namespace QuickKit.AspNetCore.Middlewares.Requests | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Middlewares.Requests Structs GlobalExceptionMiddlewareConfigurationRequest<TException> Represents a configuration request for the GlobalExceptionMiddleware."
  },
  "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptiomMiddlewareCustom-1.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptiomMiddlewareCustom-1.html",
    "title": "Class GlobalExceptiomMiddlewareCustom<TException> | QuickKit",
    "keywords": "Class GlobalExceptiomMiddlewareCustom<TException> Represents a custom global exception middleware that handles a specific type of exception. Inheritance object GlobalExceptiomMiddlewareCustom<TException> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Middlewares.Types Assembly: QuickKit.AspNetCore.dll Syntax public class GlobalExceptiomMiddlewareCustom<TException> where TException : Exception Type Parameters Name Description TException The type of exception to handle. Constructors | Edit this page View Source GlobalExceptiomMiddlewareCustom(GlobalExceptionMiddlewareConfigurationRequest<TException>) Initializes a new instance of the GlobalExceptiomMiddlewareCustom<TException> class. Declaration public GlobalExceptiomMiddlewareCustom(GlobalExceptionMiddlewareConfigurationRequest<TException> config) Parameters Type Name Description GlobalExceptionMiddlewareConfigurationRequest<TException> config The configuration for the middleware. Methods | Edit this page View Source InvokeAsync(HttpContext) Invokes the middleware asynchronously. Declaration public Task InvokeAsync(HttpContext context) Parameters Type Name Description HttpContext context The HTTP context. Returns Type Description Task A task representing the asynchronous operation."
  },
  "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptionMiddlewareDefault.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Types.GlobalExceptionMiddlewareDefault.html",
    "title": "Class GlobalExceptionMiddlewareDefault | QuickKit",
    "keywords": "Class GlobalExceptionMiddlewareDefault Middleware for handling global exceptions in ASP.NET Core applications. Inheritance object GlobalExceptionMiddlewareDefault Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.AspNetCore.Middlewares.Types Assembly: QuickKit.AspNetCore.dll Syntax public class GlobalExceptionMiddlewareDefault Constructors | Edit this page View Source GlobalExceptionMiddlewareDefault(RequestDelegate, string, bool) Initializes a new instance of the GlobalExceptionMiddlewareDefault class. Declaration public GlobalExceptionMiddlewareDefault(RequestDelegate next, string defaultMessage = \"An error has occurred while processing your request\", bool showStackStrace = true) Parameters Type Name Description RequestDelegate next The next middleware in the pipeline. string defaultMessage The default error message to be returned. bool showStackStrace A flag indicating whether to include the stack trace in the error response. Methods | Edit this page View Source InvokeAsync(HttpContext) Invokes the middleware. Declaration public Task InvokeAsync(HttpContext context) Parameters Type Name Description HttpContext context The HTTP context. Returns Type Description Task A task representing the asynchronous operation."
  },
  "api/QuickKit.AspNetCore.Middlewares.Types.html": {
    "href": "api/QuickKit.AspNetCore.Middlewares.Types.html",
    "title": "Namespace QuickKit.AspNetCore.Middlewares.Types | QuickKit",
    "keywords": "Namespace QuickKit.AspNetCore.Middlewares.Types Classes GlobalExceptiomMiddlewareCustom<TException> Represents a custom global exception middleware that handles a specific type of exception. GlobalExceptionMiddlewareDefault Middleware for handling global exceptions in ASP.NET Core applications."
  },
  "api/QuickKit.Cmd.Consoler.html": {
    "href": "api/QuickKit.Cmd.Consoler.html",
    "title": "Class Consoler | QuickKit",
    "keywords": "Class Consoler Inheritance object Consoler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Cmd Assembly: QuickKit.Cmd.dll Syntax public class Consoler Methods | Edit this page View Source Read() Declaration public static int Read() Returns Type Description int | Edit this page View Source ReadAs<T>(string, string, AlertType) Declaration public static T ReadAs<T>(string notNullAlertMessage, string convertFailedMessage, AlertType alertType = AlertType.Warning) where T : struct Parameters Type Name Description string notNullAlertMessage string convertFailedMessage AlertType alertType Returns Type Description T Type Parameters Name Description T | Edit this page View Source ReadKey() Declaration public static ConsoleKey ReadKey() Returns Type Description ConsoleKey | Edit this page View Source ReadKeyInfo() Declaration public static ConsoleKeyInfo ReadKeyInfo() Returns Type Description ConsoleKeyInfo | Edit this page View Source ReadLine() Declaration public static string? ReadLine() Returns Type Description string | Edit this page View Source ReadLine(string, AlertType) Declaration public static string ReadLine(string notNullAlertMessage, AlertType alertType = AlertType.Warning) Parameters Type Name Description string notNullAlertMessage AlertType alertType Returns Type Description string | Edit this page View Source Write(string) Declaration public static void Write(string message) Parameters Type Name Description string message | Edit this page View Source Write(string, AlertType) Declaration public static void Write(string message, AlertType type) Parameters Type Name Description string message AlertType type | Edit this page View Source WriteLine(string) Declaration public static void WriteLine(string message) Parameters Type Name Description string message | Edit this page View Source WriteLine(string, AlertType) Declaration public static void WriteLine(string message, AlertType type) Parameters Type Name Description string message AlertType type"
  },
  "api/QuickKit.Cmd.Enums.AlertType.html": {
    "href": "api/QuickKit.Cmd.Enums.AlertType.html",
    "title": "Enum AlertType | QuickKit",
    "keywords": "Enum AlertType Namespace: QuickKit.Cmd.Enums Assembly: QuickKit.Cmd.dll Syntax public enum AlertType Fields Name Description Error None Success Warning"
  },
  "api/QuickKit.Cmd.Enums.html": {
    "href": "api/QuickKit.Cmd.Enums.html",
    "title": "Namespace QuickKit.Cmd.Enums | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Enums Enums AlertType"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenu.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenu.html",
    "title": "Interface IMenu | QuickKit",
    "keywords": "Interface IMenu Namespace: QuickKit.Cmd.Menu.Interfaces Assembly: QuickKit.Cmd.dll Syntax public interface IMenu Methods | Edit this page View Source GoToOption(int) Declaration void GoToOption(int option) Parameters Type Name Description int option | Edit this page View Source SelectOption() Declaration int SelectOption() Returns Type Description int | Edit this page View Source Show() Declaration void Show() | Edit this page View Source ShowInvalidOptionMessage(string, AlertType) Declaration void ShowInvalidOptionMessage(string message, AlertType alertType = AlertType.Warning) Parameters Type Name Description string message AlertType alertType | Edit this page View Source ShowOptions() Declaration void ShowOptions()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenuMain.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenuMain.html",
    "title": "Interface IMenuMain | QuickKit",
    "keywords": "Interface IMenuMain Inherited Members IMenu.Show() IMenu.ShowOptions() IMenu.ShowInvalidOptionMessage(string, AlertType) IMenu.SelectOption() IMenu.GoToOption(int) Namespace: QuickKit.Cmd.Menu.Interfaces Assembly: QuickKit.Cmd.dll Syntax public interface IMenuMain : IMenu Methods | Edit this page View Source Exit() Declaration void Exit()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenuNoOption.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenuNoOption.html",
    "title": "Interface IMenuNoOption | QuickKit",
    "keywords": "Interface IMenuNoOption Namespace: QuickKit.Cmd.Menu.Interfaces Assembly: QuickKit.Cmd.dll Syntax public interface IMenuNoOption Methods | Edit this page View Source Show() Declaration void Show()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.IMenuSub.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.IMenuSub.html",
    "title": "Interface IMenuSub | QuickKit",
    "keywords": "Interface IMenuSub Inherited Members IMenu.Show() IMenu.ShowOptions() IMenu.ShowInvalidOptionMessage(string, AlertType) IMenu.SelectOption() IMenu.GoToOption(int) Namespace: QuickKit.Cmd.Menu.Interfaces Assembly: QuickKit.Cmd.dll Syntax public interface IMenuSub : IMenu Methods | Edit this page View Source Back() Declaration void Back() | Edit this page View Source ShowPreviousOption() Declaration void ShowPreviousOption()"
  },
  "api/QuickKit.Cmd.Menu.Interfaces.html": {
    "href": "api/QuickKit.Cmd.Menu.Interfaces.html",
    "title": "Namespace QuickKit.Cmd.Menu.Interfaces | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Menu.Interfaces Interfaces IMenu IMenuMain IMenuNoOption IMenuSub"
  },
  "api/QuickKit.Cmd.Menu.MenuMain.html": {
    "href": "api/QuickKit.Cmd.Menu.MenuMain.html",
    "title": "Class MenuMain | QuickKit",
    "keywords": "Class MenuMain Inheritance object MenuMain Implements IMenuMain IMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Cmd.Menu Assembly: QuickKit.Cmd.dll Syntax public abstract class MenuMain : IMenuMain, IMenu Methods | Edit this page View Source Exit() Declaration public virtual void Exit() | Edit this page View Source GoToOption(int) Declaration public abstract void GoToOption(int option) Parameters Type Name Description int option | Edit this page View Source SelectOption() Declaration public abstract int SelectOption() Returns Type Description int | Edit this page View Source Show() Declaration public virtual void Show() | Edit this page View Source ShowInvalidOptionMessage(string, AlertType) Declaration public virtual void ShowInvalidOptionMessage(string message, AlertType alertType = AlertType.Warning) Parameters Type Name Description string message AlertType alertType | Edit this page View Source ShowOptions() Declaration public abstract void ShowOptions() Implements IMenuMain IMenu"
  },
  "api/QuickKit.Cmd.Menu.MenuNoOption.html": {
    "href": "api/QuickKit.Cmd.Menu.MenuNoOption.html",
    "title": "Class MenuNoOption | QuickKit",
    "keywords": "Class MenuNoOption Inheritance object MenuNoOption Implements IMenuNoOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Cmd.Menu Assembly: QuickKit.Cmd.dll Syntax public abstract class MenuNoOption : IMenuNoOption Methods | Edit this page View Source Show() Declaration public abstract void Show() Implements IMenuNoOption"
  },
  "api/QuickKit.Cmd.Menu.MenuSub.html": {
    "href": "api/QuickKit.Cmd.Menu.MenuSub.html",
    "title": "Class MenuSub | QuickKit",
    "keywords": "Class MenuSub Inheritance object MenuSub Implements IMenuSub IMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Cmd.Menu Assembly: QuickKit.Cmd.dll Syntax public abstract class MenuSub : IMenuSub, IMenu Properties | Edit this page View Source NotNullAlertMessage Declaration protected abstract string NotNullAlertMessage { get; set; } Property Value Type Description string Methods | Edit this page View Source Back() Declaration public virtual void Back() | Edit this page View Source GoToOption(int) Declaration public abstract void GoToOption(int option) Parameters Type Name Description int option | Edit this page View Source SelectOption() Declaration public virtual int SelectOption() Returns Type Description int | Edit this page View Source Show() Declaration public abstract void Show() | Edit this page View Source ShowInvalidOptionMessage(string, AlertType) Declaration public virtual void ShowInvalidOptionMessage(string message, AlertType alertType = AlertType.Warning) Parameters Type Name Description string message AlertType alertType | Edit this page View Source ShowOptions() Declaration public abstract void ShowOptions() | Edit this page View Source ShowPreviousOption() Declaration public abstract void ShowPreviousOption() Implements IMenuSub IMenu"
  },
  "api/QuickKit.Cmd.Menu.html": {
    "href": "api/QuickKit.Cmd.Menu.html",
    "title": "Namespace QuickKit.Cmd.Menu | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Menu Classes MenuMain MenuNoOption MenuSub"
  },
  "api/QuickKit.Cmd.Shared.Alerter.html": {
    "href": "api/QuickKit.Cmd.Shared.Alerter.html",
    "title": "Class Alerter | QuickKit",
    "keywords": "Class Alerter Inheritance object Alerter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Cmd.Shared Assembly: QuickKit.Cmd.dll Syntax public class Alerter Methods | Edit this page View Source Alert(string, ConsoleColor) Declaration public static void Alert(string message, ConsoleColor color) Parameters Type Name Description string message ConsoleColor color | Edit this page View Source Error(string) Declaration public static void Error(string message) Parameters Type Name Description string message | Edit this page View Source ShowAlert(string, AlertType) Declaration public static void ShowAlert(string text, AlertType type) Parameters Type Name Description string text AlertType type | Edit this page View Source Success(string) Declaration public static void Success(string message) Parameters Type Name Description string message | Edit this page View Source Warning(string) Declaration public static void Warning(string message) Parameters Type Name Description string message"
  },
  "api/QuickKit.Cmd.Shared.html": {
    "href": "api/QuickKit.Cmd.Shared.html",
    "title": "Namespace QuickKit.Cmd.Shared | QuickKit",
    "keywords": "Namespace QuickKit.Cmd.Shared Classes Alerter"
  },
  "api/QuickKit.Cmd.html": {
    "href": "api/QuickKit.Cmd.html",
    "title": "Namespace QuickKit.Cmd | QuickKit",
    "keywords": "Namespace QuickKit.Cmd Classes Consoler"
  },
  "api/QuickKit.Configuration.KitConfiguration.html": {
    "href": "api/QuickKit.Configuration.KitConfiguration.html",
    "title": "Class KitConfiguration | QuickKit",
    "keywords": "Class KitConfiguration Provides extension methods for configuring QuickKit. Inheritance object KitConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Configuration Assembly: QuickKit.dll Syntax public static class KitConfiguration Methods | Edit this page View Source AddQuickKit(IServiceCollection, string, Func<IDatabaseConnectionHandler>?) Adds QuickKit services to the specified IServiceCollection. Declaration public static IServiceCollection AddQuickKit(this IServiceCollection services, string connectionString, Func<IDatabaseConnectionHandler>? config = null) Parameters Type Name Description IServiceCollection services The IServiceCollection to add the services to. string connectionString The connection string to use for the database. Func<IDatabaseConnectionHandler> config An optional configuration function to customize the database connection handler. Returns Type Description IServiceCollection The modified IServiceCollection."
  },
  "api/QuickKit.Configuration.html": {
    "href": "api/QuickKit.Configuration.html",
    "title": "Namespace QuickKit.Configuration | QuickKit",
    "keywords": "Namespace QuickKit.Configuration Classes KitConfiguration Provides extension methods for configuring QuickKit."
  },
  "api/QuickKit.Repositories.Base.IRepository-2.html": {
    "href": "api/QuickKit.Repositories.Base.IRepository-2.html",
    "title": "Interface IRepository<TEntity, TKey> | QuickKit",
    "keywords": "Interface IRepository<TEntity, TKey> Represents a generic repository interface for CRUD operations on entities. Namespace: QuickKit.Repositories.Base Assembly: QuickKit.dll Syntax public interface IRepository<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters Name Description TEntity The type of the entity. TKey The type of the entity's primary key. Methods | Edit this page View Source AddAsync(TEntity) Adds a new entity asynchronously. Declaration Task<int> AddAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to add. Returns Type Description Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. | Edit this page View Source DeleteAsync(TKey) Deletes an entity by its primary key asynchronously. Declaration Task<int> DeleteAsync(TKey id) Parameters Type Name Description TKey id The primary key of the entity to delete. Returns Type Description Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. | Edit this page View Source GetAllAsync() Retrieves all entities asynchronously. Declaration Task<IEnumerable<TEntity>> GetAllAsync() Returns Type Description Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains the collection of entities. | Edit this page View Source GetByIdAsync(TKey) Retrieves an entity by its primary key asynchronously. Declaration Task<TEntity?> GetByIdAsync(TKey id) Parameters Type Name Description TKey id The primary key of the entity. Returns Type Description Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity, or null if not found. | Edit this page View Source GetByIdThrowAsync(TKey, string) Retrieves an entity by its primary key asynchronously, throwing an exception if not found. Declaration Task<TEntity> GetByIdThrowAsync(TKey id, string notFoundExceptionMessage) Parameters Type Name Description TKey id The primary key of the entity. string notFoundExceptionMessage The exception message to throw if the entity is not found. Returns Type Description Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity. | Edit this page View Source UpdateAsync(TEntity) Updates an existing entity asynchronously. Declaration Task<int> UpdateAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to update. Returns Type Description Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows."
  },
  "api/QuickKit.Repositories.Base.Repository-2.html": {
    "href": "api/QuickKit.Repositories.Base.Repository-2.html",
    "title": "Class Repository<TEntity, TKey> | QuickKit",
    "keywords": "Class Repository<TEntity, TKey> Base class for repositories that provides common functionality for CRUD operations on entities. Inheritance object Repository<TEntity, TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Repositories.Base Assembly: QuickKit.dll Syntax public abstract class Repository<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible Type Parameters Name Description TEntity The type of the entity. TKey The type of the entity's primary key. Constructors | Edit this page View Source Repository(IValidator<TEntity>, IDatabaseConnectionHandler) Initializes a new instance of the Repository<TEntity, TKey> class. Declaration protected Repository(IValidator<TEntity> validator, IDatabaseConnectionHandler handler) Parameters Type Name Description IValidator<TEntity> validator The validator used for entity validation. IDatabaseConnectionHandler handler The database connection handler. Fields | Edit this page View Source ProcedureNameAdd Declaration protected static readonly string ProcedureNameAdd Field Value Type Description string | Edit this page View Source ProcedureNameDelete Declaration protected static readonly string ProcedureNameDelete Field Value Type Description string | Edit this page View Source ProcedureNameGetAll Declaration protected static readonly string ProcedureNameGetAll Field Value Type Description string | Edit this page View Source ProcedureNameGetById Declaration protected static readonly string ProcedureNameGetById Field Value Type Description string | Edit this page View Source ProcedureNameUpdate Declaration protected static readonly string ProcedureNameUpdate Field Value Type Description string Methods | Edit this page View Source AddAsync(TEntity) Declaration public abstract Task<int> AddAsync(TEntity entity) Parameters Type Name Description TEntity entity Returns Type Description Task<int> | Edit this page View Source ConnectToDatabase() Connects to the database. Declaration protected virtual IDbConnection ConnectToDatabase() Returns Type Description IDbConnection The database connection. | Edit this page View Source DeleteAsync(TKey) Declaration public abstract Task<int> DeleteAsync(TKey id) Parameters Type Name Description TKey id Returns Type Description Task<int> | Edit this page View Source ExecuteAsync(TEntity, CommandDefinition, string) Executes a command on the database asynchronously after validating the entity. Declaration protected Task<int> ExecuteAsync(TEntity entity, CommandDefinition command, string validationFailureMessage) Parameters Type Name Description TEntity entity The entity to validate. CommandDefinition command The command to execute. string validationFailureMessage The validation failure message to use if the entity is not valid. Returns Type Description Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. | Edit this page View Source ExecuteOnDatabaseAsync(CommandDefinition) Executes a command on the database asynchronously. Declaration protected virtual Task<int> ExecuteOnDatabaseAsync(CommandDefinition command) Parameters Type Name Description CommandDefinition command The command to execute. Returns Type Description Task<int> A task that represents the asynchronous operation. The task result contains the number of affected rows. | Edit this page View Source ExecuteOnTransactionAsync<TResult>(IDbConnection, Func<Task<TResult>>) Executes a command on the database within a transaction asynchronously. Declaration protected virtual Task<TResult> ExecuteOnTransactionAsync<TResult>(IDbConnection conn, Func<Task<TResult>> commandToExecute) Parameters Type Name Description IDbConnection conn The database connection. Func<Task<TResult>> commandToExecute The command to execute within the transaction. Returns Type Description Task<TResult> A task that represents the asynchronous operation. The task result contains the result of the command. Type Parameters Name Description TResult The type of the result. | Edit this page View Source ExistsAsync(CommandDefinition) Checks if a record exists in the database based on the given command. Declaration protected Task<bool> ExistsAsync(CommandDefinition command) Parameters Type Name Description CommandDefinition command The command to execute. Returns Type Description Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating if the record exists. | Edit this page View Source GetAllAsync() Declaration public abstract Task<IEnumerable<TEntity>> GetAllAsync() Returns Type Description Task<IEnumerable<TEntity>> | Edit this page View Source GetByIdAsync(TKey) Declaration public abstract Task<TEntity?> GetByIdAsync(TKey id) Parameters Type Name Description TKey id Returns Type Description Task<TEntity> | Edit this page View Source GetByIdThrowAsync(TKey, string) Declaration public virtual Task<TEntity> GetByIdThrowAsync(TKey id, string notFoundExceptionMessage) Parameters Type Name Description TKey id string notFoundExceptionMessage Returns Type Description Task<TEntity> | Edit this page View Source QueryAsync<TResult>(CommandDefinition) Executes a query on the database asynchronously and returns the results as a collection of TResult. Declaration protected Task<IEnumerable<TResult>> QueryAsync<TResult>(CommandDefinition command) Parameters Type Name Description CommandDefinition command The command to execute. Returns Type Description Task<IEnumerable<TResult>> A task that represents the asynchronous operation. The task result contains the collection of results. Type Parameters Name Description TResult The type of the result. | Edit this page View Source QuerySingleOrDefaultAsync<TResult>(CommandDefinition) Executes a query on the database asynchronously and returns the first result as TResult. Declaration protected Task<TResult?> QuerySingleOrDefaultAsync<TResult>(CommandDefinition command) Parameters Type Name Description CommandDefinition command The command to execute. Returns Type Description Task<TResult> A task that represents the asynchronous operation. The task result contains the first result, or null if not found. Type Parameters Name Description TResult The type of the result. | Edit this page View Source UpdateAsync(TEntity) Declaration public abstract Task<int> UpdateAsync(TEntity entity) Parameters Type Name Description TEntity entity Returns Type Description Task<int>"
  },
  "api/QuickKit.Repositories.Base.html": {
    "href": "api/QuickKit.Repositories.Base.html",
    "title": "Namespace QuickKit.Repositories.Base | QuickKit",
    "keywords": "Namespace QuickKit.Repositories.Base Classes Repository<TEntity, TKey> Base class for repositories that provides common functionality for CRUD operations on entities. Interfaces IRepository<TEntity, TKey> Represents a generic repository interface for CRUD operations on entities."
  },
  "api/QuickKit.Security.Configuration.Jwt.JwtBearerConfiguration.html": {
    "href": "api/QuickKit.Security.Configuration.Jwt.JwtBearerConfiguration.html",
    "title": "Class JwtBearerConfiguration | QuickKit",
    "keywords": "Class JwtBearerConfiguration Represents the configuration for JWT bearer authentication. Inheritance object JwtBearerConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Security.Configuration.Jwt Assembly: QuickKit.Security.dll Syntax public class JwtBearerConfiguration Methods | Edit this page View Source Configure(IServiceCollection, byte[], string, string) Configures the services for JWT bearer authentication. Declaration public static void Configure(IServiceCollection services, byte[] key, string issuer, string audience) Parameters Type Name Description IServiceCollection services The collection of services to configure. byte[] key The byte array representing the secret key used for token validation. string issuer The issuer of the JWT tokens. string audience The audience of the JWT tokens."
  },
  "api/QuickKit.Security.Configuration.Jwt.html": {
    "href": "api/QuickKit.Security.Configuration.Jwt.html",
    "title": "Namespace QuickKit.Security.Configuration.Jwt | QuickKit",
    "keywords": "Namespace QuickKit.Security.Configuration.Jwt Classes JwtBearerConfiguration Represents the configuration for JWT bearer authentication."
  },
  "api/QuickKit.Security.Configuration.SecurityConfiguration.html": {
    "href": "api/QuickKit.Security.Configuration.SecurityConfiguration.html",
    "title": "Class SecurityConfiguration | QuickKit",
    "keywords": "Class SecurityConfiguration Provides methods to configure security settings. Inheritance object SecurityConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Security.Configuration Assembly: QuickKit.Security.dll Syntax public static class SecurityConfiguration Methods | Edit this page View Source AddJwtBearerKit(IServiceCollection, byte[], string, string) Adds JWT Bearer authentication to the specified IServiceCollection. Declaration public static IServiceCollection AddJwtBearerKit(this IServiceCollection services, byte[] key, string issuer, string audience) Parameters Type Name Description IServiceCollection services The IServiceCollection to add the authentication services to. byte[] key The byte array representing the secret key used for token generation and validation. string issuer The issuer of the JWT tokens. string audience The audience of the JWT tokens. Returns Type Description IServiceCollection The modified IServiceCollection."
  },
  "api/QuickKit.Security.Configuration.html": {
    "href": "api/QuickKit.Security.Configuration.html",
    "title": "Namespace QuickKit.Security.Configuration | QuickKit",
    "keywords": "Namespace QuickKit.Security.Configuration Classes SecurityConfiguration Provides methods to configure security settings."
  },
  "api/QuickKit.Security.Jwt.IJwtTokenGenerator.html": {
    "href": "api/QuickKit.Security.Jwt.IJwtTokenGenerator.html",
    "title": "Interface IJwtTokenGenerator | QuickKit",
    "keywords": "Interface IJwtTokenGenerator Represents an interface for generating JWT tokens. Namespace: QuickKit.Security.Jwt Assembly: QuickKit.Security.dll Syntax public interface IJwtTokenGenerator Methods | Edit this page View Source Generate(JwtTokenRequest) Generates a JWT token based on the provided request. Declaration string Generate(JwtTokenRequest request) Parameters Type Name Description JwtTokenRequest request The request containing the necessary information for token generation. Returns Type Description string The generated JWT token."
  },
  "api/QuickKit.Security.Jwt.JwtTokenRequest.html": {
    "href": "api/QuickKit.Security.Jwt.JwtTokenRequest.html",
    "title": "Struct JwtTokenRequest | QuickKit",
    "keywords": "Struct JwtTokenRequest Represents a request for generating a JWT token. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: QuickKit.Security.Jwt Assembly: QuickKit.Security.dll Syntax public readonly struct JwtTokenRequest Constructors | Edit this page View Source JwtTokenRequest(IEnumerable<Claim>, DateTime, string, string, string, DateTime?, string) Initializes a new instance of the JwtTokenRequest struct. Declaration public JwtTokenRequest(IEnumerable<Claim> claims, DateTime expires, string tokenKey, string issuer, string audience, DateTime? notBefore = null, string algorithm = \"HS256\") Parameters Type Name Description IEnumerable<Claim> claims The claims to include in the token. DateTime expires The expiration date and time of the token. string tokenKey The key used to sign the token. string issuer The issuer of the token. string audience The audience of the token. DateTime? notBefore The not-before date and time of the token. string algorithm The algorithm used to sign the token. Properties | Edit this page View Source Algorithm Declaration public string Algorithm { get; init; } Property Value Type Description string | Edit this page View Source Audience Declaration public string Audience { get; init; } Property Value Type Description string | Edit this page View Source Claims Declaration public IEnumerable<Claim> Claims { get; init; } Property Value Type Description IEnumerable<Claim> | Edit this page View Source Expires Declaration public DateTime Expires { get; init; } Property Value Type Description DateTime | Edit this page View Source Issuer Declaration public string Issuer { get; init; } Property Value Type Description string | Edit this page View Source NotBefore Declaration public DateTime? NotBefore { get; init; } Property Value Type Description DateTime? | Edit this page View Source TokenKey Declaration public string TokenKey { get; init; } Property Value Type Description string"
  },
  "api/QuickKit.Security.Jwt.html": {
    "href": "api/QuickKit.Security.Jwt.html",
    "title": "Namespace QuickKit.Security.Jwt | QuickKit",
    "keywords": "Namespace QuickKit.Security.Jwt Structs JwtTokenRequest Represents a request for generating a JWT token. Interfaces IJwtTokenGenerator Represents an interface for generating JWT tokens."
  },
  "api/QuickKit.Shared.Builders.ProcedureNameEntityBuilder-1.html": {
    "href": "api/QuickKit.Shared.Builders.ProcedureNameEntityBuilder-1.html",
    "title": "Class ProcedureNameEntityBuilder<TEntity> | QuickKit",
    "keywords": "Class ProcedureNameEntityBuilder<TEntity> Represents a builder class for generating procedure names based on the entity type. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the stored procedures in the database. Example: For a stored procedure for add a PersonEntity, the output would be \"sp_person_add\" Inheritance object ProcedureNameEntityBuilder<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Shared.Builders Assembly: QuickKit.dll Syntax public class ProcedureNameEntityBuilder<TEntity> where TEntity : IEntity Type Parameters Name Description TEntity The type of the entity. Properties | Edit this page View Source Add Gets the name for the \"Add\" procedure. Declaration public static string Add { get; } Property Value Type Description string | Edit this page View Source Delete Gets the name for the \"Delete\" procedure. Declaration public static string Delete { get; } Property Value Type Description string | Edit this page View Source GetAll Gets the name for the \"GetAll\" procedure. Declaration public static string GetAll { get; } Property Value Type Description string | Edit this page View Source GetById Gets the name for the \"GetById\" procedure. Declaration public static string GetById { get; } Property Value Type Description string | Edit this page View Source Update Gets the name for the \"Update\" procedure. Declaration public static string Update { get; } Property Value Type Description string Methods | Edit this page View Source ExistsById() Gets the name for the \"ExistsById\" procedure. Declaration public static string ExistsById() Returns Type Description string The name for the \"ExistsById\" procedure."
  },
  "api/QuickKit.Shared.Builders.ViewNameEntityBuilder-1.html": {
    "href": "api/QuickKit.Shared.Builders.ViewNameEntityBuilder-1.html",
    "title": "Class ViewNameEntityBuilder<TEntity> | QuickKit",
    "keywords": "Class ViewNameEntityBuilder<TEntity> Represents a builder class for generating view names for entities. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the views in the database. Example: For a view for all VoluntarioEntity, the output would be \"vw_voluntario_all\" Inheritance object ViewNameEntityBuilder<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Shared.Builders Assembly: QuickKit.dll Syntax public class ViewNameEntityBuilder<TEntity> where TEntity : IEntity Type Parameters Name Description TEntity The type of the entity. Properties | Edit this page View Source All Gets the view name for all entities. Declaration public static string All { get; } Property Value Type Description string"
  },
  "api/QuickKit.Shared.Builders.html": {
    "href": "api/QuickKit.Shared.Builders.html",
    "title": "Namespace QuickKit.Shared.Builders | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Builders Classes ProcedureNameEntityBuilder<TEntity> Represents a builder class for generating procedure names based on the entity type. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the stored procedures in the database. Example: For a stored procedure for add a PersonEntity, the output would be \"sp_person_add\" ViewNameEntityBuilder<TEntity> Represents a builder class for generating view names for entities. Remove the \"Entity\" suffix from the entity type name and convert it to lowercase. These names are used to call the views in the database. Example: For a view for all VoluntarioEntity, the output would be \"vw_voluntario_all\""
  },
  "api/QuickKit.Shared.Entities.IEntity-1.html": {
    "href": "api/QuickKit.Shared.Entities.IEntity-1.html",
    "title": "Interface IEntity<TKey> | QuickKit",
    "keywords": "Interface IEntity<TKey> Represents an entity with a specified key. Namespace: QuickKit.Shared.Entities Assembly: QuickKit.Shared.dll Syntax public interface IEntity<TKey> : IEntity where TKey : IConvertible Type Parameters Name Description TKey The type of the entity's key. Properties | Edit this page View Source Id Gets or sets the entity's key. Declaration TKey Id { get; set; } Property Value Type Description TKey"
  },
  "api/QuickKit.Shared.Entities.IEntity-3.html": {
    "href": "api/QuickKit.Shared.Entities.IEntity-3.html",
    "title": "Interface IEntity<TEntity, TSnapshot, TKey> | QuickKit",
    "keywords": "Interface IEntity<TEntity, TSnapshot, TKey> Represents an entity with a specified key, along with methods to convert to and from a snapshot. Inherited Members IEntity<TKey>.Id Namespace: QuickKit.Shared.Entities Assembly: QuickKit.Shared.dll Syntax public interface IEntity<TEntity, TSnapshot, TKey> : IEntity<TKey>, IEntity where TEntity : IEntity<TKey> where TSnapshot : class where TKey : IConvertible Type Parameters Name Description TEntity The type of the entity. TSnapshot The type of the snapshot. TKey The type of the entity's key. Methods | Edit this page View Source FromSnapshot(TSnapshot) Converts a snapshot to an entity. Declaration public static abstract TEntity FromSnapshot(TSnapshot snapshot) Parameters Type Name Description TSnapshot snapshot The snapshot to convert. Returns Type Description TEntity The converted entity. | Edit this page View Source ToSnapshot() Converts the entity to a snapshot. Declaration TSnapshot ToSnapshot() Returns Type Description TSnapshot The snapshot representation of the entity."
  },
  "api/QuickKit.Shared.Entities.IEntity.html": {
    "href": "api/QuickKit.Shared.Entities.IEntity.html",
    "title": "Interface IEntity | QuickKit",
    "keywords": "Interface IEntity Interface base for all entities used in the application. Namespace: QuickKit.Shared.Entities Assembly: QuickKit.Shared.dll Syntax public interface IEntity Remarks -- DO NOT USE DIRECTLY ON ENTITIES -- Instead implements from IEntity<TKey> or IEntity<TEntity, TSnapshot, TKey> It is only used to identity entities, you can use it to do the same."
  },
  "api/QuickKit.Shared.Entities.html": {
    "href": "api/QuickKit.Shared.Entities.html",
    "title": "Namespace QuickKit.Shared.Entities | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Entities Interfaces IEntity Interface base for all entities used in the application. IEntity<TKey> Represents an entity with a specified key. IEntity<TEntity, TSnapshot, TKey> Represents an entity with a specified key, along with methods to convert to and from a snapshot."
  },
  "api/QuickKit.Shared.Exceptions.EntityNotFoundException.html": {
    "href": "api/QuickKit.Shared.Exceptions.EntityNotFoundException.html",
    "title": "Class EntityNotFoundException | QuickKit",
    "keywords": "Class EntityNotFoundException Represents an exception that is thrown when an entity is not found. Inheritance object Exception EntityNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: QuickKit.Shared.Exceptions Assembly: QuickKit.Shared.dll Syntax public class EntityNotFoundException : Exception, ISerializable Constructors | Edit this page View Source EntityNotFoundException(string?) Initializes a new instance of the EntityNotFoundException class with a specified error message. Declaration public EntityNotFoundException(string? message) Parameters Type Name Description string message The error message that explains the reason for the exception. Implements ISerializable"
  },
  "api/QuickKit.Shared.Exceptions.NotFoundException.html": {
    "href": "api/QuickKit.Shared.Exceptions.NotFoundException.html",
    "title": "Class NotFoundException | QuickKit",
    "keywords": "Class NotFoundException Represents an exception that is thrown when a resource is not found. Inheritance object Exception NotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: QuickKit.Shared.Exceptions Assembly: QuickKit.Shared.dll Syntax public class NotFoundException : Exception, ISerializable Constructors | Edit this page View Source NotFoundException(string) Initializes a new instance of the NotFoundException class with a specified error message. Declaration public NotFoundException(string message) Parameters Type Name Description string message The error message that explains the reason for the exception. Implements ISerializable"
  },
  "api/QuickKit.Shared.Exceptions.SnapshotNullException.html": {
    "href": "api/QuickKit.Shared.Exceptions.SnapshotNullException.html",
    "title": "Class SnapshotNullException | QuickKit",
    "keywords": "Class SnapshotNullException Represents an exception that is thrown when a snapshot is null. Inheritance object Exception SnapshotNullException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: QuickKit.Shared.Exceptions Assembly: QuickKit.Shared.dll Syntax public class SnapshotNullException : Exception, ISerializable Constructors | Edit this page View Source SnapshotNullException(string) Initializes a new instance of the SnapshotNullException class with a specified error message. Declaration public SnapshotNullException(string message) Parameters Type Name Description string message The error message that explains the reason for the exception. Implements ISerializable"
  },
  "api/QuickKit.Shared.Exceptions.ValidationFailureException.html": {
    "href": "api/QuickKit.Shared.Exceptions.ValidationFailureException.html",
    "title": "Class ValidationFailureException | QuickKit",
    "keywords": "Class ValidationFailureException Represents an exception that occurs when a validation failure is encountered. Inheritance object Exception ValidationFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: QuickKit.Shared.Exceptions Assembly: QuickKit.Shared.dll Syntax public class ValidationFailureException : Exception, ISerializable Constructors | Edit this page View Source ValidationFailureException(ValidationResult, string?) Initializes a new instance of the ValidationFailureException class with the specified validation result and message. Declaration public ValidationFailureException(ValidationResult result, string? message) Parameters Type Name Description ValidationResult result The validation result associated with the exception. string message The error message that explains the reason for the exception. Properties | Edit this page View Source Result Gets the validation result associated with the exception. Declaration public ValidationResult Result { get; } Property Value Type Description ValidationResult Implements ISerializable"
  },
  "api/QuickKit.Shared.Exceptions.html": {
    "href": "api/QuickKit.Shared.Exceptions.html",
    "title": "Namespace QuickKit.Shared.Exceptions | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Exceptions Classes EntityNotFoundException Represents an exception that is thrown when an entity is not found. NotFoundException Represents an exception that is thrown when a resource is not found. SnapshotNullException Represents an exception that is thrown when a snapshot is null. ValidationFailureException Represents an exception that occurs when a validation failure is encountered."
  },
  "api/QuickKit.Shared.Extensions.StringExtensions.html": {
    "href": "api/QuickKit.Shared.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | QuickKit",
    "keywords": "Class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Shared.Extensions Assembly: QuickKit.Shared.dll Syntax public static class StringExtensions Methods | Edit this page View Source IsEmpty(string?) Determines whether the specified string is empty, null, or consists only of white-space characters. Declaration public static bool IsEmpty(this string? value) Parameters Type Name Description string value The string to check. Returns Type Description bool true if the string is empty, null, or consists only of white-space characters; otherwise, false. | Edit this page View Source IsHigherOrEqualThan(string?, int) Determines whether the length of the specified string is higher than or equal to the specified length. Declaration public static bool IsHigherOrEqualThan(this string? value, int length) Parameters Type Name Description string value The string to check. int length The length to compare against. Returns Type Description bool true if the length of the string is higher than or equal to the specified length; otherwise, false. | Edit this page View Source IsHigherThan(string?, int) Determines whether the length of the specified string is higher than the specified length. Declaration public static bool IsHigherThan(this string? value, int length) Parameters Type Name Description string value The string to check. int length The length to compare against. Returns Type Description bool true if the length of the string is higher than the specified length; otherwise, false. | Edit this page View Source IsLowerOrEqualThan(string?, int) Determines whether the length of the specified string is lower than or equal to the specified length. Declaration public static bool IsLowerOrEqualThan(this string? value, int length) Parameters Type Name Description string value The string to check. int length The length to compare against. Returns Type Description bool true if the length of the string is lower than or equal to the specified length; otherwise, false. | Edit this page View Source IsLowerThan(string?, int) Determines whether the length of the specified string is lower than the specified length. Declaration public static bool IsLowerThan(this string? value, int length) Parameters Type Name Description string value The string to check. int length The length to compare against. Returns Type Description bool true if the length of the string is lower than the specified length; otherwise, false. | Edit this page View Source ToBool(string) Converts the specified string to a boolean. Declaration public static bool ToBool(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description bool The converted boolean value. | Edit this page View Source ToDateOnly(string) Converts the specified string to a DateOnly. Declaration public static DateOnly ToDateOnly(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description DateOnly The converted DateOnly value. | Edit this page View Source ToDateTime(string) Converts the specified string to a DateTime. Declaration public static DateTime ToDateTime(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description DateTime The converted DateTime value. | Edit this page View Source ToDecimal(string) Converts the specified string to a decimal. Declaration public static decimal ToDecimal(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description decimal The converted decimal value. | Edit this page View Source ToDouble(string) Converts the specified string to a double. Declaration public static double ToDouble(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description double The converted double value. | Edit this page View Source ToInt(string) Converts the specified string to an integer. Declaration public static int ToInt(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description int The converted integer value. | Edit this page View Source To<TType>(string) Converts the specified string to the specified type. Declaration public static TType To<TType>(this string value) where TType : struct Parameters Type Name Description string value The string to convert. Returns Type Description TType The converted value of the specified type. Type Parameters Name Description TType The type to convert the string to."
  },
  "api/QuickKit.Shared.Extensions.html": {
    "href": "api/QuickKit.Shared.Extensions.html",
    "title": "Namespace QuickKit.Shared.Extensions | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Extensions Classes StringExtensions"
  },
  "api/QuickKit.Shared.Handlers.IDatabaseConnectionHandler.html": {
    "href": "api/QuickKit.Shared.Handlers.IDatabaseConnectionHandler.html",
    "title": "Interface IDatabaseConnectionHandler | QuickKit",
    "keywords": "Interface IDatabaseConnectionHandler Represents a handler for establishing database connections. Namespace: QuickKit.Shared.Handlers Assembly: QuickKit.dll Syntax public interface IDatabaseConnectionHandler Methods | Edit this page View Source Connect() Connects to the database and returns a database connection object. Declaration IDbConnection Connect() Returns Type Description IDbConnection The database connection object."
  },
  "api/QuickKit.Shared.Handlers.html": {
    "href": "api/QuickKit.Shared.Handlers.html",
    "title": "Namespace QuickKit.Shared.Handlers | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Handlers Interfaces IDatabaseConnectionHandler Represents a handler for establishing database connections."
  },
  "api/QuickKit.Shared.Services.IService-2.html": {
    "href": "api/QuickKit.Shared.Services.IService-2.html",
    "title": "Interface IService<TEntity, TKey> | QuickKit",
    "keywords": "Interface IService<TEntity, TKey> Represents a generic service interface for performing CRUD operations on entities. Namespace: QuickKit.Shared.Services Assembly: QuickKit.Shared.dll Syntax public interface IService<TEntity, TKey> Type Parameters Name Description TEntity The type of the entity. TKey The type of the entity's primary key. Methods | Edit this page View Source AddAsync(TEntity) Adds a new entity asynchronously. Declaration Task AddAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to add. Returns Type Description Task A task that represents the asynchronous operation. | Edit this page View Source DeleteAsync(TKey) Deletes an entity by its primary key asynchronously. Declaration Task DeleteAsync(TKey id) Parameters Type Name Description TKey id The primary key of the entity to delete. Returns Type Description Task A task that represents the asynchronous operation. | Edit this page View Source GetAllAsync() Retrieves all entities asynchronously. Declaration Task<IEnumerable<TEntity>> GetAllAsync() Returns Type Description Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains the collection of entities. | Edit this page View Source GetByIdAsync(TKey) Retrieves an entity by its primary key asynchronously. Declaration Task<TEntity> GetByIdAsync(TKey id) Parameters Type Name Description TKey id The primary key of the entity. Returns Type Description Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity. | Edit this page View Source UpdateAsync(TEntity) Updates an existing entity asynchronously. Declaration Task UpdateAsync(TEntity entity) Parameters Type Name Description TEntity entity The entity to update. Returns Type Description Task A task that represents the asynchronous operation."
  },
  "api/QuickKit.Shared.Services.html": {
    "href": "api/QuickKit.Shared.Services.html",
    "title": "Namespace QuickKit.Shared.Services | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Services Interfaces IService<TEntity, TKey> Represents a generic service interface for performing CRUD operations on entities."
  },
  "api/QuickKit.Shared.Validations.Common.Validator-1.html": {
    "href": "api/QuickKit.Shared.Validations.Common.Validator-1.html",
    "title": "Class Validator<TEntity> | QuickKit",
    "keywords": "Class Validator<TEntity> Represents a base class for validators used to validate entities. Inhrerit from this class to create a validator for a specific entity. This class uses the FluentValidation library to perform the validation. Inheritance object AbstractValidator<TEntity> Validator<TEntity> Implements IValidator<TEntity> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<TEntity>.Validate(TEntity) AbstractValidator<TEntity>.ValidateAsync(TEntity, CancellationToken) AbstractValidator<TEntity>.Validate(ValidationContext<TEntity>) AbstractValidator<TEntity>.ValidateAsync(ValidationContext<TEntity>, CancellationToken) AbstractValidator<TEntity>.CreateDescriptor() AbstractValidator<TEntity>.RuleFor<TProperty>(Expression<Func<TEntity, TProperty>>) AbstractValidator<TEntity>.Transform<TProperty, TTransformed>(Expression<Func<TEntity, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<TEntity>.Transform<TProperty, TTransformed>(Expression<Func<TEntity, TProperty>>, Func<TEntity, TProperty, TTransformed>) AbstractValidator<TEntity>.RuleForEach<TElement>(Expression<Func<TEntity, IEnumerable<TElement>>>) AbstractValidator<TEntity>.TransformForEach<TElement, TTransformed>(Expression<Func<TEntity, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<TEntity>.TransformForEach<TElement, TTransformed>(Expression<Func<TEntity, IEnumerable<TElement>>>, Func<TEntity, TElement, TTransformed>) AbstractValidator<TEntity>.RuleSet(string, Action) AbstractValidator<TEntity>.When(Func<TEntity, bool>, Action) AbstractValidator<TEntity>.When(Func<TEntity, ValidationContext<TEntity>, bool>, Action) AbstractValidator<TEntity>.Unless(Func<TEntity, bool>, Action) AbstractValidator<TEntity>.Unless(Func<TEntity, ValidationContext<TEntity>, bool>, Action) AbstractValidator<TEntity>.WhenAsync(Func<TEntity, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.WhenAsync(Func<TEntity, ValidationContext<TEntity>, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.UnlessAsync(Func<TEntity, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.UnlessAsync(Func<TEntity, ValidationContext<TEntity>, CancellationToken, Task<bool>>, Action) AbstractValidator<TEntity>.Include(IValidator<TEntity>) AbstractValidator<TEntity>.Include<TValidator>(Func<TEntity, TValidator>) AbstractValidator<TEntity>.GetEnumerator() AbstractValidator<TEntity>.EnsureInstanceNotNull(object) AbstractValidator<TEntity>.PreValidate(ValidationContext<TEntity>, ValidationResult) AbstractValidator<TEntity>.RaiseValidationException(ValidationContext<TEntity>, ValidationResult) AbstractValidator<TEntity>.OnRuleAdded(IValidationRule<TEntity>) AbstractValidator<TEntity>.CascadeMode AbstractValidator<TEntity>.ClassLevelCascadeMode AbstractValidator<TEntity>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Shared.Validations.Common Assembly: QuickKit.Shared.dll Syntax public abstract class Validator<TEntity> : AbstractValidator<TEntity>, IValidator<TEntity>, IValidator, IEnumerable<IValidationRule>, IEnumerable where TEntity : IEntity Type Parameters Name Description TEntity The type of entity to be validated. Implements FluentValidation.IValidator<T> FluentValidation.IValidator IEnumerable<T> IEnumerable Extension Methods FluentValidationExtension.ValidateThrowAsync<TEntity>(IValidator<TEntity>, TEntity, string)"
  },
  "api/QuickKit.Shared.Validations.Common.html": {
    "href": "api/QuickKit.Shared.Validations.Common.html",
    "title": "Namespace QuickKit.Shared.Validations.Common | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Validations.Common Classes Validator<TEntity> Represents a base class for validators used to validate entities. Inhrerit from this class to create a validator for a specific entity. This class uses the FluentValidation library to perform the validation."
  },
  "api/QuickKit.Shared.Validations.Extensions.FluentValidationExtension.html": {
    "href": "api/QuickKit.Shared.Validations.Extensions.FluentValidationExtension.html",
    "title": "Class FluentValidationExtension | QuickKit",
    "keywords": "Class FluentValidationExtension Inheritance object FluentValidationExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: QuickKit.Shared.Validations.Extensions Assembly: QuickKit.Shared.dll Syntax public static class FluentValidationExtension Methods | Edit this page View Source ValidateThrowAsync<TEntity>(IValidator<TEntity>, TEntity, string) Validates the specified entity using the provided validator and throws a ValidationFailureException if the validation fails. Declaration public static Task ValidateThrowAsync<TEntity>(this IValidator<TEntity> validator, TEntity entity, string exceptionMessage) where TEntity : IEntity Parameters Type Name Description IValidator<TEntity> validator The validator to use for validation. TEntity entity The entity to validate. string exceptionMessage The exception message to include if the validation fails. Returns Type Description Task A task representing the asynchronous operation. Type Parameters Name Description TEntity The type of the entity to validate."
  },
  "api/QuickKit.Shared.Validations.Extensions.html": {
    "href": "api/QuickKit.Shared.Validations.Extensions.html",
    "title": "Namespace QuickKit.Shared.Validations.Extensions | QuickKit",
    "keywords": "Namespace QuickKit.Shared.Validations.Extensions Classes FluentValidationExtension"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | QuickKit",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}