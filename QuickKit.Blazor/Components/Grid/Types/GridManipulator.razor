@using QuickKit.Blazor.Components.Input
@using System.Globalization
@using QuickKit.Blazor.Components.Button;
@typeparam TDataType
@inherits Grid<TDataType>

<!--Editing Mode-->
<RadzenCard Variant="Variant.Outlined" class="rz-my-4">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
        <div>Modo de Edição</div>
        <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value"
                         Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small"
                         Disabled="@(editMode == DataGridEditMode.Multiple && dataToInsert.Count() > 1)" />
    </RadzenStack>

</RadzenCard>

<!--Export-->
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap" class="rz-my-4">
    <RadzenButton Text="@ExportExcelText" Icon="grid_on" Click="@(args => Export("excel"))" />
    <RadzenButton Text="@ExportCSVText" Icon="wrap_text" Click="@(args => Export("csv"))" />
</RadzenStack>

<!--Grid-->
<RadzenDataGrid @ref="GridComponent"
                @bind-Value=SelectedData
                Data="@Data"
                TItem="TDataType"
                EditMode="@editMode"
                RowUpdate="@OnUpdateRow"
                RowCreate="@OnCreateRow"
                Sort="@(() => Reset())"
                Page="@(() => Reset())"
                Filter="@(() => Reset())"
                FilterPopupRenderMode="@FilterPopupRenderMode"
                FilterCaseSensitivity="@FilterCaseSensitivity"
                IsLoading="@IsLoading"
                AllowFiltering="@AllowFiltering"
                AllowColumnResize="@AllowColumnResize"
                AllowAlternatingRows="@AllowAlternatingRows"
                AllowSorting="@AllowSorting"
                AllowPaging="@AllowPaging"
                ShowPagingSummary="@ShowPagingSummary"
                AllowColumnReorder="@AllowColumnReorder"
                AllowGrouping="@AllowGrouping"
                AllowMultiColumnSorting="@AllowMultiColumnSorting"
                AllowColumnPicking="@AllowColumnPicking"
                AllowCompositeDataCells="@AllowCompositeDataCells"
                AllowFilterDateInput="@AllowFilterDateInput"
                AllowPickAllColumns="@AllowPickAllColumns"
                ColumnsPickerAllowFiltering="@ColumnsPickerAllowFiltering"
                Density="@Density"
                PageSize="@PageSize"
                ColumnWidth="@ColumnWidth"
                PagerHorizontalAlign="@PagerHorizontalAlign"
                FilterMode="@FilterMode"
                LogicalFilterOperator="@LogicalFilterOperator"
                Culture="@Culture"
                EmptyText="@EmptyText"
                FirstPageTitle="@FirstPageTitle"
                LastPageTitle="@LastPageTitle"
                NextPageTitle="@NextPageTitle"
                PrevPageTitle="@PrevPageTitle"
                GroupPanelText="@GroupPanelText"
                SelectionMode="@SelectionMode"
                RowSelect="@OnRowSelectedEvent"
                ApplyFilterText="@ApplyFilterText"
                PageSizeText="@PageSizeText"
                StartsWithText="@StartsWithText"
                EndsWithText="@EndsWithText"
                ContainsText="@ContainsText"
                DoesNotContainText="@DoesNotContainText"
                IsEmptyText="@IsEmptyText"
                IsNotEmptyText="@IsNotEmptyText"
                IsNullText="@IsNullText"
                IsNotNullText="@IsNotNullText"
                EqualsText="@EqualsText"
                NotEqualsText="@NotEqualsText"
                GreaterThanText="@GreaterThanText"
                GreaterThanOrEqualsText="@GreaterThanOrEqualsText"
                LessThanText="@LessThanText"
                LessThanOrEqualsText="@LessThanOrEqualsText"
                ClearFilterText="@ClearFilterText"
                FilterText="@FilterText"
                OrOperatorText="@OrOperatorText"
                AndOperatorText="@AndOperatorText"
                ColumnsShowingText="@ColumnsShowingText"
                AllColumnsText="@AllColumnsText"
                EnumFilterSelectText="@EnumFilterSelectText"
                AllowRowSelectOnRowClick="@AllowRowSelectOnRowClick">
    <!--Header template New Record-->
    <HeaderTemplate>
        @if (ShowNewRecordButton)
        {
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Novo" Click="@OnNewRecordButtonClick" Disabled="@(editMode == DataGridEditMode.Single && dataToInsert.Count > 0)" />
        }
    </HeaderTemplate>
    <!--Columns-->
    <Columns>
        <RadzenDataGridColumn Filterable="false"
                              Sortable="false"
                              Pickable="false"
                              Reorderable="false"
                              Groupable="false"
                              TextAlign="TextAlign.Center"
                              Width="15px"
                              FrozenPosition="FrozenColumnPosition.Right">
            <!--Header template Checkbox Selection-->
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?"
                                Value="@(SelectedData == null || SelectedData?.Any() != true ? false : !Data.All(i => SelectedData.Contains(i)) ? null : Data.Any(i => SelectedData.Contains(i)))"
                                Change="@(args => SelectedData = args == true ? Data.ToList() : null)" />
            </HeaderTemplate>
            <!--Checkbox Selection-->
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedData != null && SelectedData.Contains(data))"
                                TValue="bool" Change=@(args => { if(!AllowRowSelectOnRowClick) { GridComponent?.SelectRow(data); }}) />
            </Template>
        </RadzenDataGridColumn>

        @foreach (var c in Columns)
        {
            <!--Column Creation-->
            <RadzenDataGridColumn Property="@c.PropertyName"
                                  Title="@c.Title"
                                  Width="@c.Width"
                                  TextAlign="@c.TextAlign"
                                  Filterable="@c.Filterable"
                                  Frozen="@c.Frozen"
                                  Groupable="@c.Groupable"
                                  Pickable="@c.Pickable"
                                  Reorderable="@c.Reorderable"
                                  Resizable="@c.Resizable"
                                  Sortable="@c.Sortable"
                                  UniqueID="@c.UniqueID"
                                  ColumnPickerTitle="@c.ColumnPickerTitle"
                                  Visible="@c.Visible">
                <!--Data Manipulation-->
                <EditTemplate Context="data">
                    @switch (c.Option.Type)
                    {
                        <!--Render TextBox-->
                        case RadzenFormInputType.TextBox:
                            <RadzenTextBox Style="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenTextBox.Style)))"
                                           Name="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenTextBox.Name)))"
                                           Culture="@(GetPropertyValue<CultureInfo>(c.Option.Model, nameof(RadzenTextBox.Culture)))"
                                           Disabled="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenTextBox.Disabled)))"
                                           MaxLength="@(GetPropertyValue<long?>(c.Option.Model, nameof(RadzenTextBox.MaxLength)))"
                                           Placeholder="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenTextBox.Placeholder)))"
                                           ReadOnly="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenTextBox.ReadOnly)))"
                                           Trim="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenTextBox.Trim)))"
                                           Visible="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenTextBox.Visible)))"
                                           Value="@GetPropertyValueString(data, c.PropertyName)"
                                           Change="@(args => SetPropertyValue(data, c.PropertyName, args))"
                                           ValueChanged="@(args => SetPropertyValue(data, c.PropertyName, args))" />
                            <RadzenRequiredValidator Text="ShipName is required" Component="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenTextBox.Name)))" Popup="true" />
                            break;
                        <!--Render Numeric-->
                        case RadzenFormInputType.Numeric:
                            switch (c.Option.NumericType)
                            {
                                <!--Render Numeric Int-->
                                case NumericType.Int:
                                    <RadzenNumeric TValue="int"
                                                   Value="GetPropertyValueInt(data, c.PropertyName)"
                                                   ValueChanged="@(args => SetPropertyValue<int>(data, c.PropertyName, args))"
                                                   Name="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<int>.Name)))"
                                                   Max="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<int>.Max)))"
                                                   Min="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<int>.Min)))"
                                                   Step="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<int>.Step)))"
                                                   Disabled="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<int>.Disabled)))"
                                                   ReadOnly="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<int>.ReadOnly)))"
                                                   Placeholder="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<int>.Placeholder)))"
                                                   ShowUpDown="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<int>.ShowUpDown)))"
                                                   Style="width: 100%;" />
                                    break;
                                <!--Render Numeric Float-->
                                case NumericType.Float:
                                    <RadzenNumeric TValue="float"
                                                   Value="GetPropertyValueFloat(data, c.PropertyName)"
                                                   ValueChanged="@(args => SetPropertyValue<float>(data, c.PropertyName, args))"
                                                   Max="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<float>.Max)))"
                                                   Min="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<float>.Min)))"
                                                   Step="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<float>.Step)))"
                                                   Disabled="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<float>.Disabled)))"
                                                   ReadOnly="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<float>.ReadOnly)))"
                                                   Placeholder="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<float>.Placeholder)))"
                                                   ShowUpDown="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<float>.ShowUpDown)))"
                                                   Name="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<float>.Name)))"
                                                   Style="width: 100%;" />
                                    <RadzenRequiredValidator Text="ShipName is required" Component="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<float>.Name)))" Popup="true" />
                                    break;
                                <!--Render Numeric Double-->
                                case NumericType.Double:
                                    <RadzenNumeric TValue="double"
                                                   Value="GetPropertyValueDouble(data, c.PropertyName)"
                                                   ValueChanged="@(args => SetPropertyValue<double>(data, c.PropertyName, args))"
                                                   Max="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<double>.Max)))"
                                                   Min="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<double>.Min)))"
                                                   Step="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<double>.Step)))"
                                                   Disabled="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<double>.Disabled)))"
                                                   ReadOnly="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<double>.ReadOnly)))"
                                                   Placeholder="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<double>.Placeholder)))"
                                                   ShowUpDown="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<double>.ShowUpDown)))"
                                                   Style="width: 100%;" />
                                    break;
                                <!--Render Numeric Long-->
                                case NumericType.Long:
                                    <RadzenNumeric TValue="long"
                                                   Value="GetPropertyValueLong(data, c.PropertyName)"
                                                   ValueChanged="@(args => SetPropertyValue<double>(data, c.PropertyName, args))"
                                                   Max="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<double>.Max)))"
                                                   Min="@(GetPropertyValue<decimal?>(c.Option.Model, nameof(RadzenNumeric<double>.Min)))"
                                                   Step="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<double>.Step)))"
                                                   Disabled="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<double>.Disabled)))"
                                                   ReadOnly="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<double>.ReadOnly)))"
                                                   Placeholder="@(GetPropertyValue<string>(c.Option.Model, nameof(RadzenNumeric<double>.Placeholder)))"
                                                   ShowUpDown="@(GetPropertyValue<bool>(c.Option.Model, nameof(RadzenNumeric<double>.ShowUpDown)))"
                                                   Style="width: 100%;" />
                                    break;

                                default:
                                    break;
                            }
                            break;


                        default:
                            <RadzenTextBox Value="@GetPropertyValueString(data, c.PropertyName)"
                                           ValueChanged="@(args => SetPropertyValue(data, c.PropertyName, args))" />
                            break;
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
        }
        <!--Actions Column-->
        <RadzenDataGridColumn Context="order"
                              Filterable="false"
                              Sortable="false"
                              Pickable="false"
                              Reorderable="false"
                              Groupable="false"
                              TextAlign="TextAlign.Center"
                              Frozen="true"
                              Width="60px"
                              FrozenPosition="FrozenColumnPosition.Right"
                              Title="Ações">
            <Template Context="order">
                @foreach (var b in CustomActionButton)
                {
                    <Button Class="@DEFAULT_CLASS_SPACING_BUTTON"
                            BusyText="@b.BusyText"
                            ButtonStyle="@b.ButtonStyle"
                            ButtonType="@b.ButtonType"
                            Culture="@b.Culture"
                            Disabled="@b.Disabled"
                            Icon="@b.Icon"
                            IconColor="@b.IconColor"
                            Image="@b.Image"
                            ImageAlternateText="@b.ImageAlternateText"
                            IsBusy="@b.IsBusy"
                            MouseEnter="@b.MouseEnter"
                            MouseLeave="@b.MouseLeave"
                            OnClick="@(async () => await @b.OnClick.InvokeAsync(order))"
                            Shade="@b.Shade"
                            Size="@b.Size"
                            Style="@b.Style"
                            Text="@b.Text"
                            Variant="@b.Variant"
                            Visible="@b.Visible" />
                }
                @if (CanEdit)
                {
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="@DEFAULT_CLASS_SPACING_BUTTON" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                }
                @if (CanDelete)
                {

                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                }
            </Template>
            <EditTemplate Context="order">
                @if (CanEdit)
                {
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="@DEFAULT_CLASS_SPACING_BUTTON" Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                    </RadzenButton>
                }
                @if (CanDelete)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="@DEFAULT_CLASS_SPACING_BUTTON" Click="@(args => DeleteRow(order))" aria-label="Delete">
                    </RadzenButton>
                }
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    #region Variables
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<TDataType> dataToInsert = [];
    List<TDataType> ordersToUpdate = [];
    #endregion

    #region Get Property Value

    private static T GetValueFromProperty<T>(object obj, string propertyName)
    {
        var objValue = obj?.GetType().GetProperty(propertyName)?.GetValue(obj, null);
        return objValue is null ? default(T) : (T)objValue;
    }

    private string? GetPropertyValueString(object obj, string propertyName)
    {
        var objValue = GetValueFromProperty<string>(obj, propertyName);
        return objValue is null ? null : objValue.ToString();
    }

    private T? GetPropertyValue<T>(object obj, string propertyName)
    {
        var objValue = GetValueFromProperty<T>(obj, propertyName);
        return objValue is null ? default(T) : (T)objValue;
    }

    #region Get Value Numeric
    private int GetPropertyValueInt(object obj, string propertyName)
    {
        var objValue = GetValueFromProperty<int>(obj, propertyName);
        return objValue == 0 ? 0 : int.Parse(objValue.ToString());
    }

    private long GetPropertyValueLong(object obj, string propertyName)
    {
        var objValue = GetValueFromProperty<long>(obj, propertyName);
        return objValue == 0 ? 0 : long.Parse(objValue.ToString());
    }

    private float GetPropertyValueFloat(object obj, string propertyName)
    {
        var objValue = GetValueFromProperty<float>(obj, propertyName);
        return objValue == 0 ? 0 : float.Parse(objValue.ToString());
    }

    private double GetPropertyValueDouble(object obj, string propertyName)
    {
        var objValue = GetValueFromProperty<double>(obj, propertyName);
        return objValue == 0 ? 0 : double.Parse(objValue.ToString());
    }
    #endregion


    #endregion


    #region Set Property Value

    private T? SetPropertyValue<T>(object obj, string propertyName, T value)
    {
        var propertyInfo = obj?.GetType().GetProperty(propertyName);
        if (propertyInfo != null && propertyInfo.CanWrite)
        {
            propertyInfo.SetValue(obj, value);
            return value;
        }

        return default(T);
    }

    private T? SetPropertyValue<T>(object obj, string propertyName, object value)
    {
        var propertyInfo = obj?.GetType().GetProperty(propertyName);
        if (propertyInfo != null && propertyInfo.CanWrite)
        {
            propertyInfo.SetValue(obj, value);
            return (T)value;
        }

        return default(T);
    }

    #endregion

    #region OTHERS
    void Reset()
    {
        dataToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(TDataType order)
    {
        dataToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }

    async Task EditRow(TDataType order)
    {
        if (editMode == DataGridEditMode.Single && dataToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await GridComponent.EditRow(order);
    }

    void OnUpdateRow(TDataType order)
    {
        Reset(order);

        // dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(TDataType order)
    {
        await GridComponent.UpdateRow(order);
    }

    void CancelEdit(TDataType order)
    {
        Reset(order);

        GridComponent.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(TDataType order)
    {
        Reset(order);

        // if (orders.Contains(order))
        // {
        //     dbContext.Remove<Order>(order);

        //     dbContext.SaveChanges();

        //     await ordersGrid.Reload();
        // }
        // else
        // {
        //     ordersGrid.CancelEditRow(order);
        //     await ordersGrid.Reload();
        // }
    }

    void OnCreateRow(TDataType order)
    {
        // dbContext.Add(order);

        // dbContext.SaveChanges();

        // ordersToInsert.Remove(order);
    }
    #endregion
}