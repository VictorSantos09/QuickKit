### YamlMime:ManagedReference
items:
- uid: QuickKit.Repositories.Base.Repository`2
  commentId: T:QuickKit.Repositories.Base.Repository`2
  id: Repository`2
  parent: QuickKit.Repositories.Base
  children:
  - QuickKit.Repositories.Base.Repository`2.#ctor(FluentValidation.IValidator{`0},QuickKit.Shared.Handlers.IDatabaseConnectionHandler)
  - QuickKit.Repositories.Base.Repository`2.AddAsync(`0)
  - QuickKit.Repositories.Base.Repository`2.ConnectToDatabase
  - QuickKit.Repositories.Base.Repository`2.DeleteAsync(`1)
  - QuickKit.Repositories.Base.Repository`2.ExecuteAsync(`0,Dapper.CommandDefinition,System.String)
  - QuickKit.Repositories.Base.Repository`2.ExecuteOnDatabaseAsync(Dapper.CommandDefinition)
  - QuickKit.Repositories.Base.Repository`2.ExecuteOnTransactionAsync``1(System.Data.IDbConnection,System.Func{System.Threading.Tasks.Task{``0}})
  - QuickKit.Repositories.Base.Repository`2.ExistsAsync(Dapper.CommandDefinition)
  - QuickKit.Repositories.Base.Repository`2.GetAllAsync
  - QuickKit.Repositories.Base.Repository`2.GetByIdAsync(`1)
  - QuickKit.Repositories.Base.Repository`2.GetByIdThrowAsync(`1,System.String)
  - QuickKit.Repositories.Base.Repository`2.ProcedureNameAdd
  - QuickKit.Repositories.Base.Repository`2.ProcedureNameDelete
  - QuickKit.Repositories.Base.Repository`2.ProcedureNameGetAll
  - QuickKit.Repositories.Base.Repository`2.ProcedureNameGetById
  - QuickKit.Repositories.Base.Repository`2.ProcedureNameUpdate
  - QuickKit.Repositories.Base.Repository`2.QueryAsync``1(Dapper.CommandDefinition)
  - QuickKit.Repositories.Base.Repository`2.QuerySingleOrDefaultAsync``1(Dapper.CommandDefinition)
  - QuickKit.Repositories.Base.Repository`2.UpdateAsync(`0)
  langs:
  - csharp
  - vb
  name: Repository<TEntity, TKey>
  nameWithType: Repository<TEntity, TKey>
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>
  type: Class
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: Repository
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 17
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Base class for repositories that provides common functionality for CRUD operations on entities.
  example: []
  syntax:
    content: 'public abstract class Repository<TEntity, TKey> where TEntity : IEntity where TKey : IConvertible'
    typeParameters:
    - id: TEntity
      description: The type of the entity.
    - id: TKey
      description: The type of the entity's primary key.
    content.vb: Public MustInherit Class Repository(Of TEntity As IEntity, TKey As IConvertible)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Repository(Of TEntity, TKey)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey)
  name.vb: Repository(Of TEntity, TKey)
- uid: QuickKit.Repositories.Base.Repository`2.ProcedureNameAdd
  commentId: F:QuickKit.Repositories.Base.Repository`2.ProcedureNameAdd
  id: ProcedureNameAdd
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ProcedureNameAdd
  nameWithType: Repository<TEntity, TKey>.ProcedureNameAdd
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ProcedureNameAdd
  type: Field
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ProcedureNameAdd
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 21
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  syntax:
    content: protected static readonly string ProcedureNameAdd
    return:
      type: System.String
    content.vb: Protected Shared ReadOnly ProcedureNameAdd As String
  nameWithType.vb: Repository(Of TEntity, TKey).ProcedureNameAdd
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ProcedureNameAdd
- uid: QuickKit.Repositories.Base.Repository`2.ProcedureNameDelete
  commentId: F:QuickKit.Repositories.Base.Repository`2.ProcedureNameDelete
  id: ProcedureNameDelete
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ProcedureNameDelete
  nameWithType: Repository<TEntity, TKey>.ProcedureNameDelete
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ProcedureNameDelete
  type: Field
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ProcedureNameDelete
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 22
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  syntax:
    content: protected static readonly string ProcedureNameDelete
    return:
      type: System.String
    content.vb: Protected Shared ReadOnly ProcedureNameDelete As String
  nameWithType.vb: Repository(Of TEntity, TKey).ProcedureNameDelete
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ProcedureNameDelete
- uid: QuickKit.Repositories.Base.Repository`2.ProcedureNameUpdate
  commentId: F:QuickKit.Repositories.Base.Repository`2.ProcedureNameUpdate
  id: ProcedureNameUpdate
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ProcedureNameUpdate
  nameWithType: Repository<TEntity, TKey>.ProcedureNameUpdate
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ProcedureNameUpdate
  type: Field
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ProcedureNameUpdate
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 23
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  syntax:
    content: protected static readonly string ProcedureNameUpdate
    return:
      type: System.String
    content.vb: Protected Shared ReadOnly ProcedureNameUpdate As String
  nameWithType.vb: Repository(Of TEntity, TKey).ProcedureNameUpdate
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ProcedureNameUpdate
- uid: QuickKit.Repositories.Base.Repository`2.ProcedureNameGetAll
  commentId: F:QuickKit.Repositories.Base.Repository`2.ProcedureNameGetAll
  id: ProcedureNameGetAll
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ProcedureNameGetAll
  nameWithType: Repository<TEntity, TKey>.ProcedureNameGetAll
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ProcedureNameGetAll
  type: Field
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ProcedureNameGetAll
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 24
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  syntax:
    content: protected static readonly string ProcedureNameGetAll
    return:
      type: System.String
    content.vb: Protected Shared ReadOnly ProcedureNameGetAll As String
  nameWithType.vb: Repository(Of TEntity, TKey).ProcedureNameGetAll
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ProcedureNameGetAll
- uid: QuickKit.Repositories.Base.Repository`2.ProcedureNameGetById
  commentId: F:QuickKit.Repositories.Base.Repository`2.ProcedureNameGetById
  id: ProcedureNameGetById
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ProcedureNameGetById
  nameWithType: Repository<TEntity, TKey>.ProcedureNameGetById
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ProcedureNameGetById
  type: Field
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ProcedureNameGetById
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 25
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  syntax:
    content: protected static readonly string ProcedureNameGetById
    return:
      type: System.String
    content.vb: Protected Shared ReadOnly ProcedureNameGetById As String
  nameWithType.vb: Repository(Of TEntity, TKey).ProcedureNameGetById
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ProcedureNameGetById
- uid: QuickKit.Repositories.Base.Repository`2.#ctor(FluentValidation.IValidator{`0},QuickKit.Shared.Handlers.IDatabaseConnectionHandler)
  commentId: M:QuickKit.Repositories.Base.Repository`2.#ctor(FluentValidation.IValidator{`0},QuickKit.Shared.Handlers.IDatabaseConnectionHandler)
  id: '#ctor(FluentValidation.IValidator{`0},QuickKit.Shared.Handlers.IDatabaseConnectionHandler)'
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: Repository(IValidator<TEntity>, IDatabaseConnectionHandler)
  nameWithType: Repository<TEntity, TKey>.Repository(IValidator<TEntity>, IDatabaseConnectionHandler)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.Repository(FluentValidation.IValidator<TEntity>, QuickKit.Shared.Handlers.IDatabaseConnectionHandler)
  type: Constructor
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: .ctor
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 35
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Initializes a new instance of the <xref href="QuickKit.Repositories.Base.Repository%602" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: protected Repository(IValidator<TEntity> validator, IDatabaseConnectionHandler handler)
    parameters:
    - id: validator
      type: FluentValidation.IValidator{{TEntity}}
      description: The validator used for entity validation.
    - id: handler
      type: QuickKit.Shared.Handlers.IDatabaseConnectionHandler
      description: The database connection handler.
    content.vb: Protected Sub New(validator As IValidator(Of TEntity), handler As IDatabaseConnectionHandler)
  overload: QuickKit.Repositories.Base.Repository`2.#ctor*
  nameWithType.vb: Repository(Of TEntity, TKey).New(IValidator(Of TEntity), IDatabaseConnectionHandler)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).New(FluentValidation.IValidator(Of TEntity), QuickKit.Shared.Handlers.IDatabaseConnectionHandler)
  name.vb: New(IValidator(Of TEntity), IDatabaseConnectionHandler)
- uid: QuickKit.Repositories.Base.Repository`2.GetAllAsync
  commentId: M:QuickKit.Repositories.Base.Repository`2.GetAllAsync
  id: GetAllAsync
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: GetAllAsync()
  nameWithType: Repository<TEntity, TKey>.GetAllAsync()
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.GetAllAsync()
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: GetAllAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 44
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  example: []
  syntax:
    content: public abstract Task<IEnumerable<TEntity>> GetAllAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TEntity}}}
    content.vb: Public MustOverride Function GetAllAsync() As Task(Of IEnumerable(Of TEntity))
  overload: QuickKit.Repositories.Base.Repository`2.GetAllAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).GetAllAsync()
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).GetAllAsync()
- uid: QuickKit.Repositories.Base.Repository`2.AddAsync(`0)
  commentId: M:QuickKit.Repositories.Base.Repository`2.AddAsync(`0)
  id: AddAsync(`0)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: AddAsync(TEntity)
  nameWithType: Repository<TEntity, TKey>.AddAsync(TEntity)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.AddAsync(TEntity)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: AddAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 47
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  example: []
  syntax:
    content: public abstract Task<int> AddAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public MustOverride Function AddAsync(entity As TEntity) As Task(Of Integer)
  overload: QuickKit.Repositories.Base.Repository`2.AddAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).AddAsync(TEntity)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).AddAsync(TEntity)
- uid: QuickKit.Repositories.Base.Repository`2.UpdateAsync(`0)
  commentId: M:QuickKit.Repositories.Base.Repository`2.UpdateAsync(`0)
  id: UpdateAsync(`0)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: UpdateAsync(TEntity)
  nameWithType: Repository<TEntity, TKey>.UpdateAsync(TEntity)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.UpdateAsync(TEntity)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: UpdateAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 50
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  example: []
  syntax:
    content: public abstract Task<int> UpdateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public MustOverride Function UpdateAsync(entity As TEntity) As Task(Of Integer)
  overload: QuickKit.Repositories.Base.Repository`2.UpdateAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateAsync(TEntity)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).UpdateAsync(TEntity)
- uid: QuickKit.Repositories.Base.Repository`2.DeleteAsync(`1)
  commentId: M:QuickKit.Repositories.Base.Repository`2.DeleteAsync(`1)
  id: DeleteAsync(`1)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TKey)
  nameWithType: Repository<TEntity, TKey>.DeleteAsync(TKey)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.DeleteAsync(TKey)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: DeleteAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 53
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  example: []
  syntax:
    content: public abstract Task<int> DeleteAsync(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public MustOverride Function DeleteAsync(id As TKey) As Task(Of Integer)
  overload: QuickKit.Repositories.Base.Repository`2.DeleteAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteAsync(TKey)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).DeleteAsync(TKey)
- uid: QuickKit.Repositories.Base.Repository`2.GetByIdAsync(`1)
  commentId: M:QuickKit.Repositories.Base.Repository`2.GetByIdAsync(`1)
  id: GetByIdAsync(`1)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: GetByIdAsync(TKey)
  nameWithType: Repository<TEntity, TKey>.GetByIdAsync(TKey)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.GetByIdAsync(TKey)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: GetByIdAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 56
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  example: []
  syntax:
    content: public abstract Task<TEntity?> GetByIdAsync(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public MustOverride Function GetByIdAsync(id As TKey) As Task(Of TEntity)
  overload: QuickKit.Repositories.Base.Repository`2.GetByIdAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).GetByIdAsync(TKey)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).GetByIdAsync(TKey)
- uid: QuickKit.Repositories.Base.Repository`2.GetByIdThrowAsync(`1,System.String)
  commentId: M:QuickKit.Repositories.Base.Repository`2.GetByIdThrowAsync(`1,System.String)
  id: GetByIdThrowAsync(`1,System.String)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: GetByIdThrowAsync(TKey, string)
  nameWithType: Repository<TEntity, TKey>.GetByIdThrowAsync(TKey, string)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.GetByIdThrowAsync(TKey, string)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: GetByIdThrowAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 61
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  example: []
  syntax:
    content: public virtual Task<TEntity> GetByIdThrowAsync(TKey id, string notFoundExceptionMessage)
    parameters:
    - id: id
      type: '{TKey}'
    - id: notFoundExceptionMessage
      type: System.String
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Overridable Function GetByIdThrowAsync(id As TKey, notFoundExceptionMessage As String) As Task(Of TEntity)
  overload: QuickKit.Repositories.Base.Repository`2.GetByIdThrowAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).GetByIdThrowAsync(TKey, String)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).GetByIdThrowAsync(TKey, String)
  name.vb: GetByIdThrowAsync(TKey, String)
- uid: QuickKit.Repositories.Base.Repository`2.ExistsAsync(Dapper.CommandDefinition)
  commentId: M:QuickKit.Repositories.Base.Repository`2.ExistsAsync(Dapper.CommandDefinition)
  id: ExistsAsync(Dapper.CommandDefinition)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ExistsAsync(CommandDefinition)
  nameWithType: Repository<TEntity, TKey>.ExistsAsync(CommandDefinition)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExistsAsync(Dapper.CommandDefinition)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ExistsAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 71
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Checks if a record exists in the database based on the given command.
  example: []
  syntax:
    content: protected Task<bool> ExistsAsync(CommandDefinition command)
    parameters:
    - id: command
      type: Dapper.CommandDefinition
      description: The command to execute.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation. The task result contains a boolean indicating if the record exists.
    content.vb: Protected Function ExistsAsync(command As CommandDefinition) As Task(Of Boolean)
  overload: QuickKit.Repositories.Base.Repository`2.ExistsAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).ExistsAsync(CommandDefinition)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExistsAsync(Dapper.CommandDefinition)
- uid: QuickKit.Repositories.Base.Repository`2.ConnectToDatabase
  commentId: M:QuickKit.Repositories.Base.Repository`2.ConnectToDatabase
  id: ConnectToDatabase
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ConnectToDatabase()
  nameWithType: Repository<TEntity, TKey>.ConnectToDatabase()
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ConnectToDatabase()
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ConnectToDatabase
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 83
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Connects to the database.
  example: []
  syntax:
    content: protected virtual IDbConnection ConnectToDatabase()
    return:
      type: System.Data.IDbConnection
      description: The database connection.
    content.vb: Protected Overridable Function ConnectToDatabase() As IDbConnection
  overload: QuickKit.Repositories.Base.Repository`2.ConnectToDatabase*
  nameWithType.vb: Repository(Of TEntity, TKey).ConnectToDatabase()
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ConnectToDatabase()
- uid: QuickKit.Repositories.Base.Repository`2.ExecuteOnDatabaseAsync(Dapper.CommandDefinition)
  commentId: M:QuickKit.Repositories.Base.Repository`2.ExecuteOnDatabaseAsync(Dapper.CommandDefinition)
  id: ExecuteOnDatabaseAsync(Dapper.CommandDefinition)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ExecuteOnDatabaseAsync(CommandDefinition)
  nameWithType: Repository<TEntity, TKey>.ExecuteOnDatabaseAsync(CommandDefinition)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExecuteOnDatabaseAsync(Dapper.CommandDefinition)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ExecuteOnDatabaseAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 95
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Executes a command on the database asynchronously.
  example: []
  syntax:
    content: protected virtual Task<int> ExecuteOnDatabaseAsync(CommandDefinition command)
    parameters:
    - id: command
      type: Dapper.CommandDefinition
      description: The command to execute.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous operation. The task result contains the number of affected rows.
    content.vb: Protected Overridable Function ExecuteOnDatabaseAsync(command As CommandDefinition) As Task(Of Integer)
  overload: QuickKit.Repositories.Base.Repository`2.ExecuteOnDatabaseAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).ExecuteOnDatabaseAsync(CommandDefinition)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExecuteOnDatabaseAsync(Dapper.CommandDefinition)
- uid: QuickKit.Repositories.Base.Repository`2.ExecuteOnTransactionAsync``1(System.Data.IDbConnection,System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:QuickKit.Repositories.Base.Repository`2.ExecuteOnTransactionAsync``1(System.Data.IDbConnection,System.Func{System.Threading.Tasks.Task{``0}})
  id: ExecuteOnTransactionAsync``1(System.Data.IDbConnection,System.Func{System.Threading.Tasks.Task{``0}})
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ExecuteOnTransactionAsync<TResult>(IDbConnection, Func<Task<TResult>>)
  nameWithType: Repository<TEntity, TKey>.ExecuteOnTransactionAsync<TResult>(IDbConnection, Func<Task<TResult>>)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExecuteOnTransactionAsync<TResult>(System.Data.IDbConnection, System.Func<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ExecuteOnTransactionAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 113
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Executes a command on the database within a transaction asynchronously.
  example: []
  syntax:
    content: protected virtual Task<TResult> ExecuteOnTransactionAsync<TResult>(IDbConnection conn, Func<Task<TResult>> commandToExecute)
    parameters:
    - id: conn
      type: System.Data.IDbConnection
      description: The database connection.
    - id: commandToExecute
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: The command to execute within the transaction.
    typeParameters:
    - id: TResult
      description: The type of the result.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A task that represents the asynchronous operation. The task result contains the result of the command.
    content.vb: Protected Overridable Function ExecuteOnTransactionAsync(Of TResult)(conn As IDbConnection, commandToExecute As Func(Of Task(Of TResult))) As Task(Of TResult)
  overload: QuickKit.Repositories.Base.Repository`2.ExecuteOnTransactionAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).ExecuteOnTransactionAsync(Of TResult)(IDbConnection, Func(Of Task(Of TResult)))
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExecuteOnTransactionAsync(Of TResult)(System.Data.IDbConnection, System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: ExecuteOnTransactionAsync(Of TResult)(IDbConnection, Func(Of Task(Of TResult)))
- uid: QuickKit.Repositories.Base.Repository`2.ExecuteAsync(`0,Dapper.CommandDefinition,System.String)
  commentId: M:QuickKit.Repositories.Base.Repository`2.ExecuteAsync(`0,Dapper.CommandDefinition,System.String)
  id: ExecuteAsync(`0,Dapper.CommandDefinition,System.String)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: ExecuteAsync(TEntity, CommandDefinition, string)
  nameWithType: Repository<TEntity, TKey>.ExecuteAsync(TEntity, CommandDefinition, string)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExecuteAsync(TEntity, Dapper.CommandDefinition, string)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: ExecuteAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 139
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Executes a command on the database asynchronously after validating the entity.
  example: []
  syntax:
    content: protected Task<int> ExecuteAsync(TEntity entity, CommandDefinition command, string validationFailureMessage)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: The entity to validate.
    - id: command
      type: Dapper.CommandDefinition
      description: The command to execute.
    - id: validationFailureMessage
      type: System.String
      description: The validation failure message to use if the entity is not valid.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous operation. The task result contains the number of affected rows.
    content.vb: Protected Function ExecuteAsync(entity As TEntity, command As CommandDefinition, validationFailureMessage As String) As Task(Of Integer)
  overload: QuickKit.Repositories.Base.Repository`2.ExecuteAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).ExecuteAsync(TEntity, CommandDefinition, String)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExecuteAsync(TEntity, Dapper.CommandDefinition, String)
  name.vb: ExecuteAsync(TEntity, CommandDefinition, String)
- uid: QuickKit.Repositories.Base.Repository`2.QueryAsync``1(Dapper.CommandDefinition)
  commentId: M:QuickKit.Repositories.Base.Repository`2.QueryAsync``1(Dapper.CommandDefinition)
  id: QueryAsync``1(Dapper.CommandDefinition)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: QueryAsync<TResult>(CommandDefinition)
  nameWithType: Repository<TEntity, TKey>.QueryAsync<TResult>(CommandDefinition)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.QueryAsync<TResult>(Dapper.CommandDefinition)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: QueryAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 155
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Executes a query on the database asynchronously and returns the results as a collection of <code class="typeparamref">TResult</code>.
  example: []
  syntax:
    content: protected Task<IEnumerable<TResult>> QueryAsync<TResult>(CommandDefinition command)
    parameters:
    - id: command
      type: Dapper.CommandDefinition
      description: The command to execute.
    typeParameters:
    - id: TResult
      description: The type of the result.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TResult}}}
      description: A task that represents the asynchronous operation. The task result contains the collection of results.
    content.vb: Protected Function QueryAsync(Of TResult)(command As CommandDefinition) As Task(Of IEnumerable(Of TResult))
  overload: QuickKit.Repositories.Base.Repository`2.QueryAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).QueryAsync(Of TResult)(CommandDefinition)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).QueryAsync(Of TResult)(Dapper.CommandDefinition)
  name.vb: QueryAsync(Of TResult)(CommandDefinition)
- uid: QuickKit.Repositories.Base.Repository`2.QuerySingleOrDefaultAsync``1(Dapper.CommandDefinition)
  commentId: M:QuickKit.Repositories.Base.Repository`2.QuerySingleOrDefaultAsync``1(Dapper.CommandDefinition)
  id: QuerySingleOrDefaultAsync``1(Dapper.CommandDefinition)
  parent: QuickKit.Repositories.Base.Repository`2
  langs:
  - csharp
  - vb
  name: QuerySingleOrDefaultAsync<TResult>(CommandDefinition)
  nameWithType: Repository<TEntity, TKey>.QuerySingleOrDefaultAsync<TResult>(CommandDefinition)
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.QuerySingleOrDefaultAsync<TResult>(Dapper.CommandDefinition)
  type: Method
  source:
    remote:
      path: QuickKit/Repositories/Base/Repository.cs
      branch: main
      repo: https://github.com/VictorSantos09/QuickKit.git
    id: QuerySingleOrDefaultAsync
    path: QuickKit/Repositories/Base/Repository.cs
    startLine: 169
  assemblies:
  - QuickKit
  namespace: QuickKit.Repositories.Base
  summary: Executes a query on the database asynchronously and returns the first result as <code class="typeparamref">TResult</code>.
  example: []
  syntax:
    content: protected Task<TResult?> QuerySingleOrDefaultAsync<TResult>(CommandDefinition command)
    parameters:
    - id: command
      type: Dapper.CommandDefinition
      description: The command to execute.
    typeParameters:
    - id: TResult
      description: The type of the result.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A task that represents the asynchronous operation. The task result contains the first result, or null if not found.
    content.vb: Protected Function QuerySingleOrDefaultAsync(Of TResult)(command As CommandDefinition) As Task(Of TResult)
  overload: QuickKit.Repositories.Base.Repository`2.QuerySingleOrDefaultAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).QuerySingleOrDefaultAsync(Of TResult)(CommandDefinition)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).QuerySingleOrDefaultAsync(Of TResult)(Dapper.CommandDefinition)
  name.vb: QuerySingleOrDefaultAsync(Of TResult)(CommandDefinition)
references:
- uid: QuickKit.Repositories.Base
  commentId: N:QuickKit.Repositories.Base
  href: QuickKit.html
  name: QuickKit.Repositories.Base
  nameWithType: QuickKit.Repositories.Base
  fullName: QuickKit.Repositories.Base
  spec.csharp:
  - uid: QuickKit
    name: QuickKit
    href: QuickKit.html
  - name: .
  - uid: QuickKit.Repositories
    name: Repositories
    href: QuickKit.Repositories.html
  - name: .
  - uid: QuickKit.Repositories.Base
    name: Base
    href: QuickKit.Repositories.Base.html
  spec.vb:
  - uid: QuickKit
    name: QuickKit
    href: QuickKit.html
  - name: .
  - uid: QuickKit.Repositories
    name: Repositories
    href: QuickKit.Repositories.html
  - name: .
  - uid: QuickKit.Repositories.Base
    name: Base
    href: QuickKit.Repositories.Base.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: QuickKit.Repositories.Base.Repository`2
  commentId: T:QuickKit.Repositories.Base.Repository`2
  href: QuickKit.Repositories.Base.Repository-2.html
  name: Repository<TEntity, TKey>
  nameWithType: Repository<TEntity, TKey>
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>
  nameWithType.vb: Repository(Of TEntity, TKey)
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey)
  name.vb: Repository(Of TEntity, TKey)
  spec.csharp:
  - uid: QuickKit.Repositories.Base.Repository`2
    name: Repository
    href: QuickKit.Repositories.Base.Repository-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: QuickKit.Repositories.Base.Repository`2
    name: Repository
    href: QuickKit.Repositories.Base.Repository-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: QuickKit.Repositories.Base.Repository`2.#ctor*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.#ctor
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2__ctor_FluentValidation_IValidator__0__QuickKit_Shared_Handlers_IDatabaseConnectionHandler_
  name: Repository
  nameWithType: Repository<TEntity, TKey>.Repository
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.Repository
  nameWithType.vb: Repository(Of TEntity, TKey).New
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).New
  name.vb: New
- uid: FluentValidation.IValidator{{TEntity}}
  commentId: T:FluentValidation.IValidator{`0}
  parent: FluentValidation
  definition: FluentValidation.IValidator`1
  name: IValidator<TEntity>
  nameWithType: IValidator<TEntity>
  fullName: FluentValidation.IValidator<TEntity>
  nameWithType.vb: IValidator(Of TEntity)
  fullName.vb: FluentValidation.IValidator(Of TEntity)
  name.vb: IValidator(Of TEntity)
  spec.csharp:
  - uid: FluentValidation.IValidator`1
    name: IValidator
    isExternal: true
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: FluentValidation.IValidator`1
    name: IValidator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: QuickKit.Shared.Handlers.IDatabaseConnectionHandler
  commentId: T:QuickKit.Shared.Handlers.IDatabaseConnectionHandler
  parent: QuickKit.Shared.Handlers
  href: QuickKit.Shared.Handlers.IDatabaseConnectionHandler.html
  name: IDatabaseConnectionHandler
  nameWithType: IDatabaseConnectionHandler
  fullName: QuickKit.Shared.Handlers.IDatabaseConnectionHandler
- uid: FluentValidation.IValidator`1
  commentId: T:FluentValidation.IValidator`1
  isExternal: true
  name: IValidator<T>
  nameWithType: IValidator<T>
  fullName: FluentValidation.IValidator<T>
  nameWithType.vb: IValidator(Of T)
  fullName.vb: FluentValidation.IValidator(Of T)
  name.vb: IValidator(Of T)
  spec.csharp:
  - uid: FluentValidation.IValidator`1
    name: IValidator
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FluentValidation.IValidator`1
    name: IValidator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FluentValidation
  commentId: N:FluentValidation
  isExternal: true
  name: FluentValidation
  nameWithType: FluentValidation
  fullName: FluentValidation
- uid: QuickKit.Shared.Handlers
  commentId: N:QuickKit.Shared.Handlers
  href: QuickKit.html
  name: QuickKit.Shared.Handlers
  nameWithType: QuickKit.Shared.Handlers
  fullName: QuickKit.Shared.Handlers
  spec.csharp:
  - uid: QuickKit
    name: QuickKit
    href: QuickKit.html
  - name: .
  - uid: QuickKit.Shared
    name: Shared
    href: QuickKit.Shared.html
  - name: .
  - uid: QuickKit.Shared.Handlers
    name: Handlers
    href: QuickKit.Shared.Handlers.html
  spec.vb:
  - uid: QuickKit
    name: QuickKit
    href: QuickKit.html
  - name: .
  - uid: QuickKit.Shared
    name: Shared
    href: QuickKit.Shared.html
  - name: .
  - uid: QuickKit.Shared.Handlers
    name: Handlers
    href: QuickKit.Shared.Handlers.html
- uid: QuickKit.Repositories.Base.Repository`2.GetAllAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.GetAllAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_GetAllAsync
  name: GetAllAsync
  nameWithType: Repository<TEntity, TKey>.GetAllAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.GetAllAsync
  nameWithType.vb: Repository(Of TEntity, TKey).GetAllAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).GetAllAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<TEntity>>
  nameWithType: Task<IEnumerable<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TEntity>>
  nameWithType.vb: Task(Of IEnumerable(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: Task(Of IEnumerable(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: QuickKit.Repositories.Base.Repository`2.AddAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.AddAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_AddAsync__0_
  name: AddAsync
  nameWithType: Repository<TEntity, TKey>.AddAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.AddAsync
  nameWithType.vb: Repository(Of TEntity, TKey).AddAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).AddAsync
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: QuickKit.Repositories.Base.Repository`2.UpdateAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.UpdateAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_UpdateAsync__0_
  name: UpdateAsync
  nameWithType: Repository<TEntity, TKey>.UpdateAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.UpdateAsync
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).UpdateAsync
- uid: QuickKit.Repositories.Base.Repository`2.DeleteAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.DeleteAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_DeleteAsync__1_
  name: DeleteAsync
  nameWithType: Repository<TEntity, TKey>.DeleteAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.DeleteAsync
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).DeleteAsync
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: QuickKit.Repositories.Base.Repository`2.GetByIdAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.GetByIdAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_GetByIdAsync__1_
  name: GetByIdAsync
  nameWithType: Repository<TEntity, TKey>.GetByIdAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.GetByIdAsync
  nameWithType.vb: Repository(Of TEntity, TKey).GetByIdAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).GetByIdAsync
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: QuickKit.Repositories.Base.Repository`2.GetByIdThrowAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.GetByIdThrowAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_GetByIdThrowAsync__1_System_String_
  name: GetByIdThrowAsync
  nameWithType: Repository<TEntity, TKey>.GetByIdThrowAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.GetByIdThrowAsync
  nameWithType.vb: Repository(Of TEntity, TKey).GetByIdThrowAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).GetByIdThrowAsync
- uid: QuickKit.Repositories.Base.Repository`2.ExistsAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.ExistsAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_ExistsAsync_Dapper_CommandDefinition_
  name: ExistsAsync
  nameWithType: Repository<TEntity, TKey>.ExistsAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExistsAsync
  nameWithType.vb: Repository(Of TEntity, TKey).ExistsAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExistsAsync
- uid: Dapper.CommandDefinition
  commentId: T:Dapper.CommandDefinition
  parent: Dapper
  isExternal: true
  name: CommandDefinition
  nameWithType: CommandDefinition
  fullName: Dapper.CommandDefinition
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Dapper
  commentId: N:Dapper
  isExternal: true
  name: Dapper
  nameWithType: Dapper
  fullName: Dapper
- uid: QuickKit.Repositories.Base.Repository`2.ConnectToDatabase*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.ConnectToDatabase
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_ConnectToDatabase
  name: ConnectToDatabase
  nameWithType: Repository<TEntity, TKey>.ConnectToDatabase
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ConnectToDatabase
  nameWithType.vb: Repository(Of TEntity, TKey).ConnectToDatabase
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ConnectToDatabase
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.data.idbconnection
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Data
    name: Data
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.data
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Data
    name: Data
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.data
- uid: QuickKit.Repositories.Base.Repository`2.ExecuteOnDatabaseAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.ExecuteOnDatabaseAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_ExecuteOnDatabaseAsync_Dapper_CommandDefinition_
  name: ExecuteOnDatabaseAsync
  nameWithType: Repository<TEntity, TKey>.ExecuteOnDatabaseAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExecuteOnDatabaseAsync
  nameWithType.vb: Repository(Of TEntity, TKey).ExecuteOnDatabaseAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExecuteOnDatabaseAsync
- uid: QuickKit.Repositories.Base.Repository`2.ExecuteOnTransactionAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.ExecuteOnTransactionAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_ExecuteOnTransactionAsync__1_System_Data_IDbConnection_System_Func_System_Threading_Tasks_Task___0___
  name: ExecuteOnTransactionAsync
  nameWithType: Repository<TEntity, TKey>.ExecuteOnTransactionAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExecuteOnTransactionAsync
  nameWithType.vb: Repository(Of TEntity, TKey).ExecuteOnTransactionAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExecuteOnTransactionAsync
- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of Task(Of TResult))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: QuickKit.Repositories.Base.Repository`2.ExecuteAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.ExecuteAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_ExecuteAsync__0_Dapper_CommandDefinition_System_String_
  name: ExecuteAsync
  nameWithType: Repository<TEntity, TKey>.ExecuteAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.ExecuteAsync
  nameWithType.vb: Repository(Of TEntity, TKey).ExecuteAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).ExecuteAsync
- uid: QuickKit.Repositories.Base.Repository`2.QueryAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.QueryAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_QueryAsync__1_Dapper_CommandDefinition_
  name: QueryAsync
  nameWithType: Repository<TEntity, TKey>.QueryAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.QueryAsync
  nameWithType.vb: Repository(Of TEntity, TKey).QueryAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).QueryAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TResult}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<TResult>>
  nameWithType: Task<IEnumerable<TResult>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TResult>>
  nameWithType.vb: Task(Of IEnumerable(Of TResult))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Task(Of IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: QuickKit.Repositories.Base.Repository`2.QuerySingleOrDefaultAsync*
  commentId: Overload:QuickKit.Repositories.Base.Repository`2.QuerySingleOrDefaultAsync
  href: QuickKit.Repositories.Base.Repository-2.html#QuickKit_Repositories_Base_Repository_2_QuerySingleOrDefaultAsync__1_Dapper_CommandDefinition_
  name: QuerySingleOrDefaultAsync
  nameWithType: Repository<TEntity, TKey>.QuerySingleOrDefaultAsync
  fullName: QuickKit.Repositories.Base.Repository<TEntity, TKey>.QuerySingleOrDefaultAsync
  nameWithType.vb: Repository(Of TEntity, TKey).QuerySingleOrDefaultAsync
  fullName.vb: QuickKit.Repositories.Base.Repository(Of TEntity, TKey).QuerySingleOrDefaultAsync
